# Makefile template for Configure for the frv simulator
# Copyright (C) 1998-2017 Free Software Foundation, Inc.
# Contributed by Red Hat.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

## COMMON_PRE_CONFIG_FRAG

# riscv_xlen will be set according to the target
XLEN = @riscv_xlen@
XLEN_CFLAG = -DXLEN=$(XLEN)

RISCV_OBJS = \
	riscv.o \
	traps.o \
	arch$(XLEN).o \
	cpu$(XLEN).o \
	decode$(XLEN).o \
	sem$(XLEN).o \
	model$(XLEN).o \
	mloop$(XLEN).o

SIM_OBJS = \
	$(SIM_NEW_COMMON_OBJS) \
	cgen-utils.o \
	cgen-trace.o \
	cgen-scache.o \
	cgen-run.o \
	sim-if.o \
	$(RISCV_OBJS)

# Extra headers included by sim-main.h.
SIM_EXTRA_DEPS = \
	$(CGEN_INCLUDE_DEPS) \
	arch.h \
	cpuall.h \
	riscv-sim.h \
	$(srcdir)/../../opcodes/riscv-desc.h

SIM_EXTRA_CFLAGS = $(XLEN_CFLAG)
SIM_EXTRA_CLEAN = riscv-clean


## COMMON_POST_CONFIG_FRAG

arch = riscv

sim-if.o: sim-if.c $(SIM_MAIN_DEPS) $(srcdir)/../common/sim-core.h

arch%.o: arch%.c $(SIM_MAIN_DEPS)
traps.o: traps.c $(SIM_MAIN_DEPS)

# RISCV objects

RISCV_INCLUDE_DEPS = \
	$(CGEN_MAIN_CPU_DEPS) \
	$(SIM_EXTRA_DEPS) \
	cpu$(XLEN).h \
	decode$(XLEN).h \
	eng$(XLEN).h

riscv.o:  riscv.c  $(RISCV_INCLUDE_DEPS)

mloop%.c: stamp-loop%  ; @true
eng%.h:   stamp-mloop% ; @true
stamp-mloop%: $(srcdir)/../common/genmloop.sh mloop.in Makefile
	$(SHELL) $(srccom)/genmloop.sh -shell $(SHELL) \
	  -mono -no-fast -scache \
		-prefix riscv$*bf_rv$* \
	  -cpu riscv$*bf -infile $(srcdir)/mloop.in \
		-outfile-suffix $*
	$(SHELL) $(srcroot)/move-if-change eng$*.hin eng$*.h
	$(SHELL) $(srcroot)/move-if-change mloop$*.cin mloop$*.c
	touch stamp-mloop$*

mloop%.o:  mloop%.c  $(RISCV_INCLUDE_DEPS)
cpu%.o:    cpu%.c    $(RISCV_INCLUDE_DEPS)
decode%.o: decode%.c $(RISCV_INCLUDE_DEPS)
sem%.o:    sem%.c    $(RISCV_INCLUDE_DEPS)
model%.o:  model%.c  $(RISCV_INCLUDE_DEPS)


# cgen support, enable with --enable-cgen-maint
CGEN_MAINT = ; @true
# The following line is commented in or out depending upon --enable-cgen-maint.
@CGEN_MAINT@CGEN_MAINT =


riscv-clean:
	rm -f tmp-*
	rm -f stamp-arch* stamp-cpu*

stamp-arch%: $(CGEN_READ_SCM) $(CGEN_ARCH_SCM) $(srcdir)/../../cpu/riscv.cpu $(srcdir)/../../cpu/riscv.opc Makefile
	mv $(srcdir)/cpuall.h $(srcdir)/save-cpuall.h
	mv $(srcdir)/arch.h   $(srcdir)/save-arch.h
	$(MAKE) cgen-arch $(CGEN_FLAGS_TO_PASS) \
	  archfile=$(srcdir)/../../cpu/riscv.cpu \
	  isa=rv$* mach=riscv:rv$* cpu=riscv$*bf SUFFIX=$* \
	  FLAGS="with-scache"
	mv $(srcdir)/cpuall.h $(srcdir)/cpuall$*.h
	mv $(srcdir)/arch.h   $(srcdir)/arch$*.h
	mv $(srcdir)/arch.c   $(srcdir)/arch$*.c
	mv $(srcdir)/save-cpuall.h $(srcdir)/cpuall.h
	mv $(srcdir)/save-arch.h   $(srcdir)/arch.h
	touch stamp-arch
$(srcdir)/arch%.h: $(CGEN_MAINT) stamp-arch%
	@true
$(srcdir)/arch%.c: $(CGEN_MAINT) stamp-arch%
	@true
$(srcdir)/cpuall%.h: $(CGEN_MAINT) stamp-arch%
	@true

stamp-cpu%: $(CGEN_READ_SCM) $(CGEN_CPU_SCM) $(CGEN_DECODE_CPU) $(srcdir)/../../cpu/riscv.cpu $(srcdir)/../../cpu/riscv.opc Makefile
	$(MAKE) cgen-cpu-decode $(CGEN_FLAGS_TO_PASS) \
	  archfile=$(srcdir)/../../cpu/riscv.cpu \
	  isa=rv$* mach=riscv:rv$* cpu=riscv$*bf SUFFIX=$* \
	  FLAGS="with-scache" \
		EXTRAFILES="$(CGEN_CPU_SEM)"
	touch stamp-cpu
$(srcdir)/cpu%.h: $(CGEN_MAINT) stamp-cpu%
	@true
$(srcdir)/cpu%.c: $(CGEN_MAINT) stamp-cpu%
	@true
$(srcdir)/sem%.c: $(CGEN_MAINT) stamp-cpu%
	@true
$(srcdir)/model%.c: $(CGEN_MAINT) stamp-cpu%
	@true
$(srcdir)/decode%.c: $(CGEN_MAINT) stamp-cpu%
	@true
$(srcdir)/decode%.h: $(CGEN_MAINT) stamp-cpu%
	@true

