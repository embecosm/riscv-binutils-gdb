/* RISCV opcode support.  -*- C -*-
   Copyright (C) 2019 Free Software Foundation, Inc.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, see <http://www.gnu.org/licenses/>. */

/* This file is an addendum to riscv.cpu.  Heavy use of C code isn't
   appropriate in .cpu files, so it resides here.  This especially applies
   to assembly/disassembly where parsing/printing can be quite involved.
   Such things aren't really part of the specification of the cpu, per se,
   so .cpu files provide the general framework and .opc files handle the
   nitty-gritty details as necessary.

   Each section is delimited with start and end markers.

   <arch>-opc.h additions use: "-- opc.h"
   <arch>-opc.c additions use: "-- opc.c"
   <arch>-asm.c additions use: "-- asm.c"
   <arch>-dis.c additions use: "-- dis.c"
   <arch>-ibd.h additions use: "-- ibd.h"  */

/* -- opc.h */

extern int riscv_cgen_insn_supported (CGEN_CPU_DESC cd,
				      const CGEN_INSN * insn);
extern void riscv_cgen_init_riscv_extensions (CGEN_BITSET * exts);
extern void riscv_cgen_set_rvc (int rvc);

#undef CGEN_DIS_HASH_SIZE
#define CGEN_DIS_HASH_SIZE 1
#undef CGEN_DIS_HASH
#define CGEN_DIS_HASH(buffer, value) 0

struct disassemble_info;
extern void disassemble_init_riscv (struct disassemble_info *info);

/* -- */

/* -- opc.c */

#include <assert.h>

/* Current enabled rvc extension.  */
static int riscv_cgen_rvc = RVEXT_RVNONE;

/* Supported extensions (excluding 'C' extensions)  */
static CGEN_BITSET *riscv_cgen_extensions = NULL;

int
riscv_cgen_insn_supported (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
			   const CGEN_INSN * insn)
{
  if (!riscv_cgen_extensions)
    return TRUE;

  /* We *should* use CGEN_INSN_BITSET_ATTR_VALUE to access the value of
     CGEN_INSN_RVEXT as a bitset, however despite the fact that it is declared
     as `bitset' attribute it's actually stored as a mask.  */
  int insn_exts = CGEN_INSN_ATTR_VALUE (insn, CGEN_INSN_RVEXT);
  if (insn_exts & (1 << riscv_cgen_rvc))
    return TRUE;
  for (int i = 0; insn_exts != 0;)
    {
      if ((insn_exts & 1) && cgen_bitset_contains (riscv_cgen_extensions, i))
	return TRUE;
      insn_exts >>= 1;
      i++;
    }
  return FALSE;
}

void
riscv_cgen_init_riscv_extensions (CGEN_BITSET * exts)
{
  assert (riscv_cgen_extensions == NULL
	  && "Extensions should only be initialized once");

  /* Copy all of the extensions across except the RV32C/RV64C extensions, as
     these will be toggleable after initialization.  Save the initial 'C'
     extension if one is enabled.  */
  if (cgen_bitset_contains (exts, RVEXT_RV32C))
    riscv_cgen_rvc = RVEXT_RV32C;
  else if (cgen_bitset_contains (exts, RVEXT_RV64C))
    riscv_cgen_rvc = RVEXT_RV64C;
  else
    riscv_cgen_rvc = RVEXT_RVNONE;

  riscv_cgen_extensions = cgen_bitset_create (RVEXT_RVMAX);
  for (int i = 0; i < RVEXT_RVMAX; i++)
    {
      if (i == RVEXT_RV32C || i == RVEXT_RV64C)
	continue;
      if (cgen_bitset_contains (exts, i))
	cgen_bitset_add (riscv_cgen_extensions, i);
    }
}

void
riscv_cgen_set_rvc (int rvc)
{
  assert (rvc == RVEXT_RVNONE || rvc == RVEXT_RV32C || rvc == RVEXT_RV64C);
  riscv_cgen_rvc = rvc;
}

/* -- */

/* -- asm.c */

/* -- */

/* -- dis.c */

/* -- */

/* -- ibd.h */

/* -- */
