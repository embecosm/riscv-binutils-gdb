; Copyright (C) 2020 Free Software Foundation, Inc.
;
; This file is part of the GNU Binutils.
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
; MA 02110-1301, USA.

;===----------------------- Known Limitations -------------------------------===
;
; * The E extension is not yet supported.
; * It is not possible to select an arbitrary subset of extensions to be
;   enabled in an instance of the simulator - it is only possible to choose
;   from a fixed set of machines.
; * The load-reserve (lr.w) instruction does not emulate the reservation of
;   memory, and the store-conditional (sc.w) does not check for a reservation
;   before storing. These instructions simply behave like lw and sw.
; * The Q extension is not yet supported in the simulator.
; * xlen == 128 is unsupported
; * Simulators for xlen == 32 and xlen == 64 are generated and built
;   separately. The simulator can only be built to target one or the
;   other.
;
;===------------------- Naming schemes for registers ------------------------===
;
;  fl-      : Floating point registers
;  fl-tied- : Tied floating point register
;  c-       : Compressed registers
;  c-tied-  : Tied compressed register
;  -ne0     : Any register except 'zero' (x0)
;  -ne2     : Any register except 'sp' (x2)
;  -ne0-ne2 : Any register except 'zero' (x0) or 'sp' (x2)
;  fc-      : Compressed floating point register
;
;===---------------- Naming scheme for fields and operands ------------------===
;
;   [f-][nz][imm10][-121-42-51-21-61][-0000]
;
; f-
;   This is a field (as opposed to an operand)
; nz
;   non-zero
; imm10
;   10-bit signed immediate, uimm is used for unsigned immediates
; -121-42-51-21-61 ->
;   Field description, starting from the most significant bit to the
;   least. Each '-' separated number is a pair consisting of the
;   "start bit" and "length". The length will always be <= (start bit + 1).
; -0000 ->
;   A number of trailing bits in the field/operand which are always 0.
;
; So "f-nzimm10-121-42-51-21-61-0000" is a *field* for a *non-zero*, *signed*,
; *10-bit* immediate, where bit 9 of the immediate comes from a field starting
; at bit *12* of length *1*, bits 8 and 7 come from a field starting at bit
; *4* of length *2*, bit 6 comes from a field starting at bit *5* of length *1*,
; bit 5 comes from a field starting at *2* of length *1*, bit 4 comes
; from a field at *6* of length *1*, and bits 3 to 0 are all *0*.

(include "simplify.inc")

(define-arch
  (name riscv)
  (comment "RISCV")
  (insn-lsb0? #t)
  (machs rv32i rv32ic rv32im rv32imc rv32g rv32gc rv32gqc
         rv64i rv64ic rv64im rv64imc rv64g rv64gc rv64gqc)
  (isas rv32 rv64)
)

; Instruction set parameters.

(define-isa
  (name rv32)
  (default-insn-word-bitsize 32)
  (default-insn-bitsize 32)

  ; The documentation implies that this should be the minimum size of
  ; an instruction, however when sanitizing the instructions an error
  ; will be emitted ("Instruction has opcode bits outside of its mask.")
  ; if any opcode (fixed) bits are set outside the bottom <base-insn-bitsize>
  ; bits (which is the case for most of the 32-bit instructions). If this error
  ; is turned off, then you end up causing a different error because the
  ; decoder only ends up considering the bottom <base-insn-bitsize> bits and
  ; ends up with unresolved ambiguities.
  ;
  ; To make matters worse, setting <base-insn-bitsize> to 32 here causes
  ; a different error, as the generated decoder will try and use bits 16-32
  ; when decoding a 16-bit instruction and triggers an assertion
  ; "(assert (< bitnum word-bitsize))" when it accesses a bit outside the
  ; instruction mask.
  ;
  ; The solution has been to patch cgen to avoid tripping this last error,
  ; restricting the decoder to use only bits 0-15 until it has read more
  ; of the instruction bits.
  (base-insn-bitsize 32)
)
(define-isa
  (name rv64)
  (default-insn-word-bitsize 32)
  (default-insn-bitsize 32)
  (base-insn-bitsize 32)
)
(define-pmacro all-isas (ISA rv32 rv64))

; Bitset describing the extensions which a given instruction belongs to.
; These attributes are used by a cgen-based assembler to disable instructions
; when an extension is not specified in the arch provided to -march.
(define-attr
  (name RVEXT)
  (comment "RISC-V Extensions")
  (type bitset)
  (for mach insn)
  (values RVNONE
          RV32IFENCEI RV64IFENCEI
          RV32ICSR RV64ICSR
          RV32I RV64I RV32E
          RV32M RV64M
          RV32C RV64C
          RV32A RV64A
          RV32B RV64B
          RV32V RV64V
          RV32F RV64F
          RV32D RV64D
          RV32FC RV64FC
          RV32DC RV64DC
          RV32Q RV64Q
          RV32ZBB RV64ZBB
          RV32ZBS RV64ZBS
          RV32ZBP RV64ZBP
          RV32ZBM RV64ZBM
          RV32ZBT RV64ZBT
          RV32ZBF RV64ZBF
          RV32ZBR RV64ZBR
          RV32ZBC RV64ZBC
          RV32ZBE RV64ZBE
          RVMAX)
  (default RVNONE)
)
(define-pmacro i-ext (RVEXT RV32I RV64I))
(define-pmacro a-ext (RVEXT RV32A RV64A))
(define-pmacro b-ext (RVEXT RV32B RV64B))
(define-pmacro v-ext (RVEXT RV32V RV64V))
(define-pmacro f-ext (RVEXT RV32F RV64F))
(define-pmacro d-ext (RVEXT RV32D RV64D))
(define-pmacro fc-ext (RVEXT RV32FC RV64FC))
(define-pmacro dc-ext (RVEXT RV32DC RV64DC))
(define-pmacro q-ext (RVEXT RV32Q RV64Q))
(define-pmacro m-ext (RVEXT RV32M RV64M))
(define-pmacro c-ext (RVEXT RV32C RV64C))
(define-pmacro zbb-ext (RVEXT RV32ZBB RV64ZBB))
(define-pmacro zbs-ext (RVEXT RV32ZBS RV64ZBS))
(define-pmacro zbp-ext (RVEXT RV32ZBP RV64ZBP))
(define-pmacro zbm-ext (RVEXT RV32ZBM RV64ZBM))
(define-pmacro zbt-ext (RVEXT RV32ZBT RV64ZBT))
(define-pmacro zbf-ext (RVEXT RV32ZBF RV64ZBF))
(define-pmacro zbr-ext (RVEXT RV32ZBR RV64ZBR))
(define-pmacro zbc-ext (RVEXT RV32ZBC RV64ZBC))
(define-pmacro zbe-ext (RVEXT RV32ZBE RV64ZBE))
(define-pmacro ifencei-ext (RVEXT RV32IFENCEI RV64IFENCEI))
(define-pmacro icsr-ext    (RVEXT RV32ICSR RV64ICSR))

; Various macros to specify the machines which support a given extension
(define-pmacro rv32-machs  (MACH rv32i rv32ic rv32im rv32imc rv32g rv32gc rv32gqc))
(define-pmacro rv64-machs  (MACH rv64i rv64ic rv64im rv64imc rv64g rv64gc rv64gqc))
(define-pmacro all-machs   (MACH rv32i rv32ic rv32im rv32imc rv32g rv32gc rv32gqc
                                 rv64i rv64ic rv64im rv64imc rv64g rv64gc rv64gqc))

(define-pmacro rv32m-machs (MACH rv32im rv32imc rv32g rv32gc rv32gqc))
(define-pmacro rv64m-machs (MACH rv64im rv64imc rv64g rv64gc rv64gqc))
(define-pmacro m-machs     (MACH rv32im rv32imc rv32g rv32gc rv32gqc
                                 rv64im rv64imc rv64g rv64gc rv64gqc))

(define-pmacro rv32c-machs (MACH rv32ic rv32imc rv32gc rv32gqc))
(define-pmacro rv64c-machs (MACH rv64ic rv64imc rv64gc rv64gqc))
(define-pmacro c-machs     (MACH rv32ic rv32imc rv32gc rv32gqc
                                 rv64ic rv64imc rv64gc rv64gqc))

(define-pmacro rv32a-machs (MACH rv32g rv32gc rv32gqc))
(define-pmacro rv64a-machs (MACH rv64g rv64gc rv64gqc))
(define-pmacro a-machs     (MACH rv32g rv32gc rv32gqc rv64g rv64gc rv64gqc))

(define-pmacro rv32b-machs (MACH rv32g rv32gc rv32gqc))
(define-pmacro rv64b-machs (MACH rv64g rv64gc rv64gqc))
(define-pmacro b-machs     (MACH rv32g rv32gc rv32gqc rv64g rv64gc rv64gqc))

(define-pmacro rv32v-machs (MACH rv32g rv32gc rv32gqc))
(define-pmacro rv64v-machs (MACH rv64g rv64gc rv64gqc))
(define-pmacro v-machs     (MACH rv32g rv32gc rv32gqc rv64g rv64gc rv64gqc))

(define-pmacro rv32f-machs (MACH rv32g rv32gc rv32gqc))
(define-pmacro rv64f-machs (MACH rv64g rv64gc rv64gqc))
(define-pmacro f-machs     (MACH rv32g rv32gc rv32gqc rv64g rv64gc rv64gqc))

(define-pmacro rv32d-machs (MACH rv32g rv32gc rv32gqc))
(define-pmacro rv64d-machs (MACH rv64g rv64gc rv64gqc))
(define-pmacro d-machs     (MACH rv32g rv32gc rv32gqc rv64g rv64gc rv64gqc))

(define-pmacro rv32fc-machs (MACH rv32gc rv32gqc))
(define-pmacro rv64fc-machs (MACH rv64gc rv64gqc))
(define-pmacro fc-machs     (MACH rv32gc rv32gqc rv64gc rv64gqc))

(define-pmacro rv32dc-machs (MACH rv32gc rv32gqc))
(define-pmacro rv64dc-machs (MACH rv64gc rv64gqc))
(define-pmacro dc-machs     (MACH rv32gc rv32gqc rv64gc rv64gqc))

(define-pmacro rv32q-machs (MACH rv32gqc))
(define-pmacro rv64q-machs (MACH rv64gqc))
(define-pmacro q-machs     (MACH rv32gqc rv64gqc))


; Whenever a new machine is added, various updates need to be done:
;   1) Add the machine name to the appropriate (keep-mach? ...) below.
;   2) Add the machine to the (define-arch) at the top of this file
;   3) Update the RVxxx-MACHS macros as appropriate.
;   4) Add to the list of machs in the cgen invocations in sim/riscv/Makefile.in
; A new machine will need to be added if you want the simulator to be able to
; target a different combination of extensions.
(if (keep-mach? (rv32i rv32ic rv32im rv32imc rv32g rv32gc rv32gqc))
  (begin
    (define-cpu
      (name riscv32bf)
      (comment "RISCV CPU family")
      (insn-endian little)
      (data-endian little)
      (word-bitsize 32)
      (file-transform "32")
    )
    (define-pmacro (riscv32bf-simple-mach mach-name mach-comment)
      (begin
        (define-mach
          (name mach-name)
          (comment mach-comment)
          (cpu riscv32bf)
          (isas rv32)
          (bfd-name "riscv:rv32")
        )
        (define-model
          (name mach-name)
          (mach mach-name)
          (unit u-exec "execution unit" ()
            1 1 ; issue done
            ()  ; state
            ()  ; inputs
            ()  ; ouputs
            ()  ; profile action (default)
          )
        )
      )
    )
    ; The first mach in this list is used as the default machine for the
    ; architecture. We use rv32gc as a good default.
    (riscv32bf-simple-mach rv32gc  "Generic rv32gc")

    (riscv32bf-simple-mach rv32i   "Generic rv32i")
    (riscv32bf-simple-mach rv32ic  "Generic rv32ic")
    (riscv32bf-simple-mach rv32im  "Generic rv32im")
    (riscv32bf-simple-mach rv32imc "Generic rv32imc")
    (riscv32bf-simple-mach rv32g   "Generic rv32g")
    (riscv32bf-simple-mach rv32gqc "Generic rv32gqc")
  )
)
(if (keep-mach? (rv64i rv64ic rv64im rv64imc rv64g rv64gc rv64gqc))
  (begin
    (define-cpu
      (name riscv64bf)
      (comment "RISCV CPU family (64-bit)")
      (insn-endian little)
      (data-endian little)
      (word-bitsize 64)
      (file-transform "64")
    )
    (define-pmacro (riscv64bf-simple-mach mach-name mach-comment)
      (begin
        (define-mach
          (name mach-name)
          (comment mach-comment)
          (cpu riscv64bf)
          (isas rv64)
          (bfd-name "riscv:rv64")
        )
        (define-model
          (name mach-name)
          (mach mach-name)
          (unit u-exec "execution unit" ()
            1 1 ; issue done
            ()  ; state
            ()  ; inputs
            ()  ; ouputs
            ()  ; profile action (default)
          )
        )
      )
    )
    ; The first mach in this list is used as the default machine for the
    ; architecture. We use rv64gc as a good default.
    (riscv64bf-simple-mach rv64gc  "Generic rv64gc")

    (riscv64bf-simple-mach rv64i   "Generic rv64i")
    (riscv64bf-simple-mach rv64ic  "Generic rv64ic")
    (riscv64bf-simple-mach rv64im  "Generic rv64im")
    (riscv64bf-simple-mach rv64imc "Generic rv64imc")
    (riscv64bf-simple-mach rv64g   "Generic rv64g")
    (riscv64bf-simple-mach rv64gqc "Generic rv64gqc")
    (define-model
      (name riscv64)
      (mach rv64i,rv64ic,rv64im,rv64imc,rv64g,rv64gc,rv64gqc)
      (unit u-exec "execution unit" ()
        1 1 ; issue done
        ()  ; state
        ()  ; inputs
        ()  ; ouputs
        ()  ; profile action (default)
      )
    )
  )
)

(include "riscv-common.cpu")
(include "riscv-m.cpu")
(include "riscv-a.cpu")
(include "riscv-b.cpu")
(include "riscv-fpu.cpu")
(include "riscv-misc.cpu")
