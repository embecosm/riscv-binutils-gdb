; RISCV CPU description.  -*- Scheme -*-
; Copyright 2018 Embecosm Limited.
;
; Contributed by Mary Bennett (mary.bennett@embecosm.com)
;                Edward Jones (ed.jones@embecosm.com)
;
; This file is part of the GNU Binutils.
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
; MA 02110-1301, USA.


;===------------------- Naming schemes for registers ------------------------===
;
;  fl-      : Floating point registers
;  fl-tied- : Tied floating point register
;  c-       : Compressed registers
;  c-tied-  : Tied compressed register
;  -ne0     : Non zero register
;  -ne2     : Non two register
;  -ne0-ne2 : Non zero or two register
;  fc-      : Compressed floating point register
;
;===---------------- Naming scheme for fields and operands ------------------===
;
;   [f-][nz][imm10][-121-42-51-21-61][-0000]
;
; f-
;   This is a field (as opposed to an operand)
; nz
;   non-zero
; imm10
;   10-bit signed immediate, uimm is used for unsigned immediates
; -121-42-51-21-61 ->
;   Field description, starting from the most significant bit to the
;   least. Each '-' separated number is a pair consisting of the
;   "start bit" and "length". The length will always be <= (start bit + 1).
; -0000 ->
;   A number of trailing bits in the field/operand which are always 0.
;
; So "f-nzimm10-121-42-51-21-61-0000" is a *field* for a *non-zero*, *signed*,
; *10-bit* immediate, where bit 9 of the immediate comes from a field starting
; at bit *12* of length *1*, bits 8 and 7 come from a field starting at bit
; *4* of length *2*, bit 6 comes from a field starting at bit *5* of length *1*,
; bit 5 comes from a field starting at *2* of length *1*, bit 4 comes
; from a field at *6* of length *1*, and bits 3 to 0 are all *0*.


(include "simplify.inc")

(define-arch
  (name riscv)
  (comment "RISCV")
  (insn-lsb0? #t)
  (machs rv32i rv32ic rv32im rv32imc rv32g rv32gc rv32gqc
         rv64i rv64ic rv64im rv64imc rv64g rv64gc rv64gqc)
  (isas rv32 rv64)
)

; Instruction set parameters.

(define-isa
  (name rv32)
  (default-insn-word-bitsize 32)
  (default-insn-bitsize 32)

  ; The documentation implies that this should be the minimum size of
  ; an instruction, however when sanitizing the instructions an error
  ; will be emitted ("Instruction has opcode bits outside of its mask.")
  ; if any opcode (fixed) bits are set outside the bottom <base-insn-bitsize>
  ; bits (which is the case for most of the 32-bit instructions). If this error
  ; is turned off, then you end up causing a different error because the
  ; decoder only ends up considering the bottom <base-insn-bitsize> bits and
  ; ends up with unresolved ambiguities.
  ;
  ; To make matters worse, setting <base-insn-bitsize> to 32 here causes
  ; a different error, as the generated decoder will try and use bits 16-32
  ; when decoding a 16-bit instruction and triggers an assertion
  ; (assert (< bitnum word-bitsize)) when it accesses a bit outside the
  ; instruction mask.
  ;
  ; The solution has been to patch cgen to avoid tripping this last error,
  ; restricting the decoder to use only bits 0-15 until it has read more
  ; of the instruction in.
  (base-insn-bitsize 32)
)
(define-isa
  (name rv64)
  (default-insn-word-bitsize 32)
  (default-insn-bitsize 32)
  (base-insn-bitsize 32)
)
(define-pmacro all-isas (ISA rv32 rv64))

; Bitset describing the extensions which a given instruction belongs to.
; These attributes are used by the assembler to disable instructions when
; an extension is not specified in the arch provided to -march.
(define-attr
  (name RVEXT)
  (comment "RISC-V Extensions")
  (type bitset)
  (for mach insn)
  (values RVNONE
          RV32I RV64I RV32E
          RV32M RV64M
          RV32C RV64C
          RV32A RV64A
          RV32F RV64F
          RV32D RV64D
          RV32Q RV64Q
          RVMAX)
  (default RVNONE)
)
(define-pmacro i-ext (RVEXT RV32I RV64I))
(define-pmacro a-ext (RVEXT RV32A RV64A))
(define-pmacro f-ext (RVEXT RV32F RV64F))
(define-pmacro d-ext (RVEXT RV32D RV64D))
(define-pmacro q-ext (RVEXT RV32Q RV64Q))
(define-pmacro m-ext (RVEXT RV32M RV64M))
(define-pmacro c-ext (RVEXT RV32C RV64C))

; Various macros to specify the machines which support a given extension
(define-pmacro rv32-machs  (MACH rv32i rv32ic rv32im rv32imc rv32g rv32gc rv32gqc))
(define-pmacro rv64-machs  (MACH rv64i rv64ic rv64im rv64imc rv64g rv64gc rv64gqc))
(define-pmacro all-machs   (MACH rv32i rv32ic rv32im rv32imc rv32g rv32gc rv32gqc
                                 rv64i rv64ic rv64im rv64imc rv64g rv64gc rv64gqc))

(define-pmacro rv32m-machs (MACH rv32im rv32imc rv32g rv32gc rv32gqc))
(define-pmacro rv64m-machs (MACH rv64im rv64imc rv64g rv64gc rv64gqc))
(define-pmacro m-machs     (MACH rv32im rv32imc rv32g rv32gc rv32gqc
                                 rv64im rv64imc rv64g rv64gc rv64gqc))

(define-pmacro rv32c-machs (MACH rv32ic rv32imc rv32gc rv32gqc))
(define-pmacro rv64c-machs (MACH rv64ic rv64imc rv64gc rv64gqc))
(define-pmacro c-machs     (MACH rv32ic rv32imc rv32gc rv32gqc
                                 rv64ic rv64imc rv64gc rv64gqc))

(define-pmacro rv32a-machs (MACH rv32g rv32gc rv32gqc))
(define-pmacro rv64a-machs (MACH rv64g rv64gc rv64gqc))
(define-pmacro a-machs     (MACH rv32g rv32gc rv32gqc rv64g rv64gc rv64gqc))

(define-pmacro rv32f-machs (MACH rv32g rv32gc rv32gqc))
(define-pmacro rv64f-machs (MACH rv64g rv64gc rv64gqc))
(define-pmacro f-machs     (MACH rv32g rv32gc rv32gqc rv64g rv64gc rv64gqc))

(define-pmacro rv32d-machs (MACH rv32g rv32gc rv32gqc))
(define-pmacro rv64d-machs (MACH rv64g rv64gc rv64gqc))
(define-pmacro d-machs     (MACH rv32g rv32gc rv32gqc rv64g rv64gc rv64gqc))

(define-pmacro rv32q-machs (MACH rv32gqc))
(define-pmacro rv64q-machs (MACH rv64gqc))
(define-pmacro q-machs     (MACH rv32gqc rv64gqc))


; Whenever a new machine is added, various updates need to be done:
;   1) Add the machine name to the appropriate (keep-mach? ...) below.
;   2) Add the machine to the (define-arch) at the top of this file
;   3) Update the RVxxx-MACHS macros as appropriate.
;   4) Add to the list of machs in the cgen invocations in sim/riscv/Makefile.in
(if (keep-mach? (rv32i rv32ic rv32im rv32imc rv32g rv32gc rv32gqc))
  (begin
    (define-cpu
      (name riscv32bf)
      (comment "RISCV CPU family")
      (insn-endian little)
      (data-endian little)
      (word-bitsize 32)
      (file-transform "32")
    )
    (define-pmacro (riscv32bf-simple-mach mach-name mach-comment mach-bfd)
      (begin
        (define-mach
          (name mach-name)
          (comment mach-comment)
          (cpu riscv32bf)
          (isas rv32)
          (bfd-name mach-bfd)
        )
        (define-model
          (name mach-name)
          (mach mach-name)
          (unit u-exec "execution unit" ()
            1 1 ; issue done
            ()  ; state
            ()  ; inputs
            ()  ; ouputs
            ()  ; profile action (default)
          )
        )
      )
    )
    (riscv32bf-simple-mach rv32i   "Generic rv32i"   "rv32i")
    (riscv32bf-simple-mach rv32ic  "Generic rv32ic"  "rv32ic")
    (riscv32bf-simple-mach rv32im  "Generic rv32im"  "rv32im")
    (riscv32bf-simple-mach rv32imc "Generic rv32imc" "rv32imc")
    (riscv32bf-simple-mach rv32g   "Generic rv32g"   "rv32g")
    (riscv32bf-simple-mach rv32gc  "Generic rv32gc"  "rv32gc")
    (riscv32bf-simple-mach rv32gqc "Generic rv32gqc" "riscv:rv32")
  )
)
(if (keep-mach? (rv64i rv64ic rv64im rv64imc rv64g rv64gc rv64gqc))
  (begin
    (define-cpu
      (name riscv64bf)
      (comment "RISCV CPU family (64-bit)")
      (insn-endian little)
      (data-endian little)
      (word-bitsize 64)
      (file-transform "64")
    )
    (define-pmacro (riscv64bf-simple-mach mach-name mach-comment mach-bfd)
      (begin
        (define-mach
          (name mach-name)
          (comment mach-comment)
          (cpu riscv64bf)
          (isas rv64)
          (bfd-name mach-bfd)
        )
        (define-model
          (name mach-name)
          (mach mach-name)
          (unit u-exec "execution unit" ()
            1 1 ; issue done
            ()  ; state
            ()  ; inputs
            ()  ; ouputs
            ()  ; profile action (default)
          )
        )
      )
    )
    (riscv64bf-simple-mach rv64i   "Generic rv64i"   "rv64i")
    (riscv64bf-simple-mach rv64ic  "Generic rv64ic"  "rv64ic")
    (riscv64bf-simple-mach rv64im  "Generic rv64im"  "rv64im")
    (riscv64bf-simple-mach rv64imc "Generic rv64imc" "rv64imc")
    (riscv64bf-simple-mach rv64g   "Generic rv64g"   "rv64g")
    (riscv64bf-simple-mach rv64gc  "Generic rv64gc"  "rv64gc")
    (riscv64bf-simple-mach rv64gqc "Generic rv64gqc" "riscv:rv64")
    (define-model
      (name riscv64)
      (mach rv64i,rv64ic,rv64im,rv64imc,rv64g,rv64gc,rv64gqc)
      (unit u-exec "execution unit" ()
        1 1 ; issue done
        ()  ; state
        ()  ; inputs
        ()  ; ouputs
        ()  ; profile action (default)
      )
    )
  )
)

(define-normal-enum
  except-numbers
  "Exception numbers"
  ()
  EXCEPT-
  (("NONE"   #x00)
   ("EBREAK" #x01))
)
(define-pmacro (raise-exception exnum)
  (c-call VOID "@cpu@_exception" pc exnum))

(define-hardware
  (name h-pc)
  (comment "program counter")
  (attrs PC all-isas all-machs)
  (type pc USI)
  (get () (raw-reg h-pc))
  (set (newval) (set (raw-reg h-pc) newval))
)

(define-hardware
  (name h-xlen)
  (comment "xlen")
  (attrs VIRTUAL all-isas all-machs)
  (type register WI)
  (get () (c-call WI "@cpu@_h_xlen_get_handler"))
  (set (newval) (nop))
)

(define-pmacro gpr-names (
  ; ABI names
  ; These are first as that appear to cause them to be prioritized
  ; over the generic names
  (zero 0) (ra   1) (sp   2) (gp   3) (tp   4) (t0   5) (t1   6)
  (t2   7) (s0   8) (s1   9) (a0  10) (a1  11) (a2  12) (a3  13)
  (a4  14) (a5  15) (a6  16) (a7  17) (s2  18) (s3  19) (s4  20)
  (s5  21) (s6  22) (s7  23) (s8  24) (s9  25) (s10 26) (s11 27)
  (t3  28) (t4  29) (t5  30) (t6  31)

  ; Basic register names
  (x0   0) (x1   1) (x2   2) (x3   3) (x4   4) (x5   5) (x6   6)
  (x7   7) (x8   8) (x9   9) (x10 10) (x11 11) (x12 12) (x13 13)
  (x14 14) (x15 15) (x16 16) (x17 17) (x18 18) (x19 19) (x20 20)
  (x21 21) (x22 22) (x23 23) (x24 24) (x25 25) (x26 26) (x27 27)
  (x28 28) (x29 29) (x30 30) (x31 31))
)

(define-hardware
  (name h-gpr)
  (comment "General Purpose Registers")
  (attrs all-isas all-machs)
  (type register WI (64))
  (indices keyword "" gpr-names)
  (get (index) (raw-reg h-gpr index))
  ; x0/zero is tied to zero, so any writes are swallowed
  (set (index newval)
    (if (ne index 0)
      (set (raw-reg h-gpr index) newval)))
)
(define-hardware
  (name h-gpr-not-zero)
  (comment "General Purpose Registers (except x0)")
  (attrs VIRTUAL all-isas all-machs)
  (type register WI (32))
  (indices keyword "" (.find (.pmacro (n) (.ne (.ref n 1) 0)) gpr-names))
  (get (index) (reg h-gpr index))
  (set (index newval) (set (reg h-gpr index) newval))
)
(define-hardware
  (name h-gpr-not-sp)
  (comment "General Purpose Registers (except x2)")
  (attrs VIRTUAL all-isas all-machs)
  (type register WI (32))
  (indices keyword "" (.find (.pmacro (n) (.ne (.ref n 1) 2)) gpr-names))
  (get (index) (reg h-gpr index))
  (set (index newval) (set (reg h-gpr index) newval))
)
(define-hardware
  (name h-gpr-not-zero-or-sp)
  (comment "General Purpose Registers (except x0/x2)")
  (attrs VIRTUAL all-isas all-machs)
  (type register WI (32))
  (indices keyword "" (.find (.pmacro (n) (.andif (.ne (.ref n 1) 0) (.ne (.ref n 1) 2))) gpr-names))
  (get (index) (reg h-gpr index))
  (set (index newval) (set (reg h-gpr index) newval))
)
(define-hardware
  (name h-zero)
  (comment "zero (x0/ zero)")
  (attrs VIRTUAL all-isas all-machs)
  (type register WI (32))
  (indices keyword "" (.find (.pmacro (n) (.eq (.ref n 1) 0)) gpr-names))
  (get (index) (reg h-gpr index))
  (set (index newval) (set (reg h-gpr index) newval))
)
(define-hardware
  (name h-sp)
  (comment "stack pointer (x2/sp)")
  (attrs VIRTUAL all-isas all-machs)
  (type register WI (32))
  (indices keyword "" (.find (.pmacro (n) (.eq (.ref n 1) 2)) gpr-names))
  (get (index) (reg h-gpr index))
  (set (index newval) (set (reg h-gpr index) newval))
)
(define-hardware
  (name h-c-gpr)
  (comment "RVC Registers")
  (attrs VIRTUAL all-isas all-machs)
  (type register WI (32))
  (indices keyword ""
    ; Filter out registers with a value <8 or >15. Remap register values in the
    ; range [8, 15] to [0, 7]
    (.map
      (.pmacro (n) ((.ref n 0) (.add (.ref n 1) -8)))
      (.find (.pmacro (n) (.andif (.ge (.ref n 1) 8) (.le (.ref n 1) 15))) gpr-names)
    )
  )
  ; Remap register numbers from [0,7] range back to the original range [8,15]
  (get (index) (reg h-gpr (add index 8)))
  (set (index newval) (set (reg h-gpr (add index 8)) newval))
)

(define-hardware
  (name h-csr)
  (comment "CSRs")
  (attrs all-isas all-machs)
  (type register UWI (4096))
  (indices keyword ""(
    (ustatus #x0) (uie #x4) (utvec #x5)
    (uscratch #x40) (uepc #x41) (ucause #x42) (utval #x43) (uip #x44)
    (fflags #x1) (frm #x2) (fcsr #x3)
    (cycle        #xc00) (time         #xc01) (instret      #xc02)
    (hpmcounter3  #xc03) (hpmcounter4  #xc04) (hpmcounter5  #xc05)
    (hpmcounter6  #xc06) (hpmcounter7  #xc07) (hpmcounter8  #xc08)
    (hpmcounter9  #xc09) (hpmcounter10 #xc0a) (hpmcounter11 #xc0b)
    (hpmcounter12 #xc0c) (hpmcounter13 #xc0d) (hpmcounter14 #xc0e)
    (hpmcounter15 #xc0f) (hpmcounter16 #xc10) (hpmcounter17 #xc11)
    (hpmcounter18 #xc12) (hpmcounter19 #xc13) (hpmcounter20 #xc14)
    (hpmcounter21 #xc15) (hpmcounter22 #xc16) (hpmcounter23 #xc17)
    (hpmcounter24 #xc18) (hpmcounter25 #xc19) (hpmcounter26 #xc1a)
    (hpmcounter27 #xc1b) (hpmcounter28 #xc1c) (hpmcounter29 #xc1d)
    (hpmcounter30 #xc1e) (hpmcounter31 #xc1f)
    (sstatus  #x100) (sedeleg #x102) (sideleg #x103) (sie  #x104)
    (stvec  #x105) (scounteren #x106)
    (sscratch #x140) (sepc #x141) (scause #x142) (stval  #x143) (sip #x144)
    (satp #x180)
    (mstatus #x300) (misa  #x301) (medeleg    #x302) (mideleg #x303)
    (mie     #x304) (mtvec #x305) (mcounteren #x306)
    (mscratch #x340) (mepc #x341) (mcause #x342) (mtval #x343) (mip #x344)
    (pmpcfg0   #x3a0) (pmpcfg1   #x3a1) (pmpcfg2   #x3a2) (pmpcfg3   #x3a3)
    (pmpaddr0  #x3b0) (pmpaddr1  #x3b1) (pmpaddr2  #x3b2) (pmpaddr3  #x3b3)
    (pmpaddr4  #x3b4) (pmpaddr5  #x3b5) (pmpaddr6  #x3b6) (pmpaddr7  #x3b7)
    (pmpaddr8  #x3b8) (pmpaddr9  #x3b9) (pmpaddr10 #x3ba) (pmpaddr11 #x3bb)
    (pmpaddr12 #x3bc) (pmpaddr13 #x3bd) (pmpaddr14 #x3be) (pmpaddr15 #x3bf)
    (tselect #x7a0) (tdata1 #x7a1) (tdata2 #x7a2) (tdata3 #x7a3)
    (dcsr #x7b0) (dpc #x7b1) (dscratch #x7b2)
    (mcycle        #xb00) (minstret      #xb02) (mhpmcounter3  #xb03)
    (mhpmcounter4  #xb04) (mhpmcounter5  #xb05) (mhpmcounter6  #xb06)
    (mhpmcounter7  #xb07) (mhpmcounter8  #xb08) (mhpmcounter9  #xb09)
    (mhpmcounter10 #xb0a) (mhpmcounter11 #xb0b) (mhpmcounter12 #xb0c)
    (mhpmcounter13 #xb0d) (mhpmcounter14 #xb0e) (mhpmcounter15 #xb0f)
    (mhpmcounter16 #xb10) (mhpmcounter17 #xb11) (mhpmcounter18 #xb12)
    (mhpmcounter19 #xb13) (mhpmcounter20 #xb14) (mhpmcounter21 #xb15)
    (mhpmcounter22 #xb16) (mhpmcounter23 #xb17) (mhpmcounter24 #xb18)
    (mhpmcounter25 #xb19) (mhpmcounter26 #xb1a) (mhpmcounter27 #xb1b)
    (mhpmcounter28 #xb1c) (mhpmcounter29 #xb1d) (mhpmcounter30 #xb1e)
    (mhpmcounter31 #xb1f)
    (mucounteren #x320) (mscounteren #x321) (mhpmevent3  #x323)
    (mhpmevent4  #x324) (mhpmevent5  #x325) (mhpmevent6  #x326)
    (mhpmevent7  #x327) (mhpmevent8  #x328) (mhpmevent9  #x329)
    (mhpmevent10 #x32a) (mhpmevent11 #x32b) (mhpmevent12 #x32c)
    (mhpmevent13 #x32d) (mhpmevent14 #x32e) (mhpmevent15 #x32f)
    (mhpmevent16 #x330) (mhpmevent17 #x331) (mhpmevent18 #x332)
    (mhpmevent19 #x333) (mhpmevent20 #x334) (mhpmevent21 #x335)
    (mhpmevent22 #x336) (mhpmevent23 #x337) (mhpmevent24 #x338)
    (mhpmevent25 #x339) (mhpmevent26 #x33a) (mhpmevent27 #x33b)
    (mhpmevent28 #x33c) (mhpmevent29 #x33d) (mhpmevent30 #x33e)
    (mhpmevent31 #x33f)
    (mvendorid #xf11) (marchid #xf12) (mimpid #xf13) (mhartid #xf14)
    (cycleh        #xc80) (timeh         #xc81) (instreth      #xc82)
    (hpmcounter3h  #xc83) (hpmcounter4h  #xc84) (hpmcounter5h  #xc85)
    (hpmcounter6h  #xc86) (hpmcounter7h  #xc87) (hpmcounter8h  #xc88)
    (hpmcounter9h  #xc89) (hpmcounter10h #xc8a) (hpmcounter11h #xc8b)
    (hpmcounter12h #xc8c) (hpmcounter13h #xc8d) (hpmcounter14h #xc8e)
    (hpmcounter15h #xc8f) (hpmcounter16h #xc90) (hpmcounter17h #xc91)
    (hpmcounter18h #xc92) (hpmcounter19h #xc93) (hpmcounter20h #xc94)
    (hpmcounter21h #xc95) (hpmcounter22h #xc96) (hpmcounter23h #xc97)
    (hpmcounter24h #xc98) (hpmcounter25h #xc99) (hpmcounter26h #xc9a)
    (hpmcounter27h #xc9b) (hpmcounter28h #xc9c) (hpmcounter29h #xc9d)
    (hpmcounter30h #xc9e) (hpmcounter31h #xc9f)
    (mcycleh        #xb80) (minstreth      #xb82) (mhpmcounter3h  #xb83)
    (mhpmcounter4h  #xb84) (mhpmcounter5h  #xb85) (mhpmcounter6h  #xb86)
    (mhpmcounter7h  #xb87) (mhpmcounter8h  #xb88) (mhpmcounter9h  #xb89)
    (mhpmcounter10h #xb8a) (mhpmcounter11h #xb8b) (mhpmcounter12h #xb8c)
    (mhpmcounter13h #xb8d) (mhpmcounter14h #xb8e) (mhpmcounter15h #xb8f)
    (mhpmcounter16h #xb90) (mhpmcounter17h #xb91) (mhpmcounter18h #xb92)
    (mhpmcounter19h #xb93) (mhpmcounter20h #xb94) (mhpmcounter21h #xb95)
    (mhpmcounter22h #xb96) (mhpmcounter23h #xb97) (mhpmcounter24h #xb98)
    (mhpmcounter25h #xb99) (mhpmcounter26h #xb9a) (mhpmcounter27h #xb9b)
    (mhpmcounter28h #xb9c) (mhpmcounter29h #xb9d) (mhpmcounter30h #xb9e)
    (mhpmcounter31h #xb9f)
    (mtimecmp #x7c0)

    ; These registers appear in priv spec 1.9.1 but were renamed in 1.10
    (ubadaddr #x43)   ; renamed to utval
    (sbadaddr #x143)  ; renamed to stval
    (sptbr    #x180)  ; renamed to satp
    (mbadaddr #x343)  ; renamed to mtval

    ; These registers appear in priv spec 1.9.1 but were dropped in 1.10
    (hstatus  #x200) (hedeleg #x202) (hideleg #x203) (hie #x204) (htvec #x205)
    (hscratch #x240) (hepc    #x241) (hcause  #x242) (hbadaddr #x243)
    (hip      #x244)
    (mbase   #x380) (mbound  #x381) (mibase      #x382) (mibound #x383)
    (mdbase  #x384) (mdbound #x385) (mhcounteren #x322))

  )
  (get (index) (raw-reg h-csr index))
  (set (index newval) (set (raw-reg h-csr index) newval))
)

(define-pmacro fpr-names () (
    (ft0  0) (ft1  1) (ft2   2) (ft3   3) (ft4  4) (ft5   5) (ft6   6)
    (ft7  7) (fs0  8) (fs1   9) (fa0  10) (fa1 11) (fa2  12) (fa3  13)
    (fa4 14) (fa5 15) (fa6  16) (fa7  17) (fs2 18) (fs3  19) (fs4  20)
    (fs5 21) (fs6 22) (fs7  23) (fs8  24) (fs9 25) (fs10 26) (fs11 27)
    (ft8 28) (ft9 29) (ft10 30) (ft11 31)
    ; Basic register names
    (f0   0) (f1   1) (f2   2) (f3   3) (f4   4) (f5   5) (f6   6)
    (f7   7) (f8   8) (f9   9) (f10 10) (f11 11) (f12 12) (f13 13)
    (f14 14) (f15 15) (f16 16) (f17 17) (f18 18) (f19 19) (f20 20)
    (f21 21) (f22 22) (f23 23) (f24 24) (f25 25) (f26 26) (f27 27)
    (f28 28) (f29 29) (f30 30) (f31 31))
)

; There is one register file of floating point registers, which is
; shared by the 'F' (single precision) and 'D' (double precision)
; extensions. The registers are defined as being 64 bits wide, with only
; the lower 32 bits used by the 'F' instructions.
(define-hardware
  (name h-fpr)
  (comment "Floating Point Registers")
  (attrs all-isas f-machs)
  (type register DI (32))
  (indices keyword "" fpr-names)
)

(define-hardware
  (name h-c-fpr)
  (comment "Floating Point RVC Registers")
  (attrs VIRTUAL all-isas f-machs)
  (type register DI (32))
  (indices keyword ""
    ; Filter out registers with a value <8 or >15. Remap register values in the
    ; range [8, 15] to [0, 7]
    (.map
      (.pmacro (n) ((.ref n 0) (.add (.ref n 1) -8)))
      (.find (.pmacro (n) (.andif (.ge (.ref n 1) 8) (.le (.ref n 1) 15))) fpr-names)
    )
  )
  ; Remap register numbers from [0,7] range back to the original range [8,15]
  (get (index) (reg h-fpr (add index 8)))
  (set (index newval) (set (reg h-fpr (add index 8)) newval))
)

;; Instruction fields

(dnf f-dummy    "dummy"    (all-isas)  0  0)
(dnf f-opcode   "opcode"   (all-isas)  6  7)
(dnf f-c-opcode "c.opcode" (all-isas)  1  2)
(dnf f-rd       "rd"       (all-isas) 11  5)
(dnf f-rs1      "rs1"      (all-isas) 19  5)
(dnf f-rs2      "rs2"      (all-isas) 24  5)
(dnf f-rs3      "rs3"      (all-isas) 31  5)
(dnf f-csr      "csr"      (all-isas) 31 12)
(dnf f-succ     "succ"     (all-isas) 27  4)
(dnf f-pred     "pred"     (all-isas) 23  4)
(dnf f-funct2   "funct2"   (all-isas) 26  2)
(dnf f-funct5   "funct5"   (all-isas) 31  5)
(dnf f-funct6   "funct6"   (all-isas) 31  6)
(dnf f-funct7   "funct7"   (all-isas) 31  7)
(dnf f-funct3   "funct3"   (all-isas) 14  3)
(dnf f-c-funct3 "c.funct3" (all-isas) 15  3)
(dnf f-c-funct4 "c.funct4" (all-isas) 15  4)
(dnf f-c-funct6 "c.funct6" (all-isas) 15  6)
(dnf f-aq       "aq"       (all-isas) 26  1)
(dnf f-rl       "rl"       (all-isas) 25  1)
(dnf f-fp2      "fp2"      (all-isas) 26  2)

(df f-uimm1-21    "uimm1  [2]"      (all-isas)  2  1 UDI #f #f)
(df f-uimm2-32    "uimm2  [3..2]"   (all-isas)  3  2 UDI #f #f)
(df f-uimm2-42    "uimm2  [4..3]"   (all-isas)  4  2 UDI #f #f)
(df f-uimm3-43    "uimm3  [4..2]"   (all-isas)  4  3 UDI #f #f)
(df f-uimm1-51    "uimm1  [5]"      (all-isas)  5  1 UDI #f #f)
(df f-uimm3-53    "uimm3  [5..3]"   (all-isas)  5  3 UDI #f #f)
(df f-uimm1-61    "uimm1  [6]"      (all-isas)  6  1 UDI #f #f)
(df f-uimm2-62    "uimm2  [6..5]"   (all-isas)  6  2 UDI #f #f)
(df f-uimm3-63    "uimm3  [6..4]"   (all-isas)  6  3 UDI #f #f)
(df f-uimm5-65    "uimm5  [6..2]"   (all-isas)  6  5 UDI #f #f)
(df f-uimm1-71    "uimm1  [7]"      (all-isas)  7  1 UDI #f #f)
(df f-uimm1-81    "uimm1  [8]"      (all-isas)  8  1 UDI #f #f)
(df f-uimm2-82    "uimm2  [8..7]"   (all-isas)  8  2 UDI #f #f)
(df f-uimm3-93    "uimm3  [9..7]"   (all-isas)  9  3 UDI #f #f)
(df f-uimm2-102   "uimm2  [10..9]"  (all-isas) 10  2 UDI #f #f)
(df f-uimm4-104   "uimm4  [10..7]"  (all-isas) 10  4 UDI #f #f)
(df f-uimm1-111   "uimm1  [11]"     (all-isas) 11  1 UDI #f #f)
(df f-uimm2-112   "uimm2  [11..10]" (all-isas) 11  2 UDI #f #f)
(df f-uimm4-114   "uimm4  [11..8]"  (all-isas) 11  4 UDI #f #f)
(df f-uimm5-115   "uimm5  [11..7]"  (all-isas) 11  5 UDI #f #f)
(df f-uimm1-121   "uimm1  [12]"     (all-isas) 12  1 UDI #f #f)
(df f-uimm2-122   "uimm2  [12..11]" (all-isas) 12  2 UDI #f #f)
(df f-uimm3-123   "uimm3  [12..10]" (all-isas) 12  3 UDI #f #f)
(df f-uimm4-124   "uimm4  [12..9]"  (all-isas) 12  4 UDI #f #f)
(df f-uimm15-1415 "uimm15 [14..0]"  (all-isas) 14 15 UDI #f #f)
(df f-uimm16-1516 "uimm16 [15..0]"  (all-isas) 15 16 UDI #f #f)
(df f-uimm5-195   "uimm5  [19..15]" (all-isas) 19  5 UDI #f #f)
(df f-uimm8-198   "uimm8  [19..12]" (all-isas) 19  8 UDI #f #f)
(df f-uimm20-1920 "uimm20 [19..0]"  (all-isas) 19 20 UDI #f #f)
(df f-uimm1-201   "uimm1  [20]"     (all-isas) 20  1 UDI #f #f)
(df f-uimm5-245   "uimm5  [24..20]" (all-isas) 24  5 UDI #f #f)
(df f-uimm6-256   "uimm6  [25..20]" (all-isas) 25  6 UDI #f #f)
(df f-uimm6-306   "uimm6  [30..25]" (all-isas) 30  6 UDI #f #f)
(df f-uimm10-3010 "uimm10 [30..21]" (all-isas) 30 10 UDI #f #f)
(df f-uimm4-314   "uimm4  [31..28]" (all-isas) 31  4 UDI #f #f)
(df f-uimm7-317   "uimm7  [31..25]" (all-isas) 31  7 UDI #f #f)
(df f-uimm12-3112 "uimm12 [31..20]" (all-isas) 31 12 UDI #f #f)
(df f-uimm32-3132 "uimm32 [31..0]"  (all-isas) 31 32 UDI #f #f)

(define-ifield
  (name f-uimm32-3120-000000000000)
  (comment "uimm12 [31..12]000000000000")
  (attrs all-isas)
  (start 31)
  (length 20)
  (mode UDI)
  (encode (value pc) (srl DI value 12))
  (decode (value pc) (sll DI value 12))
)

(df f-imm1-121   "imm1  [12]"     (all-isas) 12  1 DI #f #f)
(df f-imm1-311   "imm1  [31]"     (all-isas) 31  1 DI #f #f)
(df f-imm7-317   "imm7  [31..25]" (all-isas) 31  7 DI #f #f)
(df f-imm12-3112 "imm12 [31..20]" (all-isas) 31 12 DI #f #f)

(define-multi-ifield
  (name f-imm12-317-115)
  (comment "imm12 [31..25][11..7]")
  (attrs all-isas)
  (mode DI)
  (subfields f-imm7-317 f-uimm5-115)
  (insert (sequence ()
    (set (ifield f-imm7-317)  (sra (ifield f-imm12-317-115) 5))
    (set (ifield f-uimm5-115) (and (ifield f-imm12-317-115) #x1f)))
  )
  (extract (sequence ()
    (set (ifield f-imm12-317-115)
      (or (sll (ifield f-imm7-317) 5) (ifield f-uimm5-115))))
  )
)

(define-multi-ifield
  (name f-imm13-311-71-306-114-0)
  (comment "imm13 [31][7][30..25][11..8]0")
  (attrs all-isas)
  (mode DI)
  (subfields f-imm1-311 f-uimm1-71 f-uimm6-306 f-uimm4-114)
  (insert (sequence ()
    (set (ifield f-imm1-311)   (sra      (ifield f-imm13-311-71-306-114-0) 11))
    (set (ifield f-uimm1-71)   (and (sra (ifield f-imm13-311-71-306-114-0) 10) #x1))
    (set (ifield f-uimm6-306)  (and (sra (ifield f-imm13-311-71-306-114-0) 4)  #x3f))
    (set (ifield f-uimm4-114)  (and      (ifield f-imm13-311-71-306-114-0)     #xf)))
  )
  (extract (set (ifield f-imm13-311-71-306-114-0)
    (or (or (sll (ifield f-imm1-311) 11) (sll (ifield f-uimm1-71) 10))
        (or (sll (ifield f-uimm6-306) 4)      (ifield f-uimm4-114))))
  )
  (encode (value pc) (sra DI value 1))
  (decode (value pc) (sll DI value 1))
)

(define-multi-ifield
  (name f-imm21-311-198-201-3010-0)
  (comment "imm21 [31][19..12][20][30..21]0")
  (attrs all-isas)
  (mode DI)
  (subfields f-imm1-311 f-uimm8-198 f-uimm1-201 f-uimm10-3010)
  (insert (sequence ()
    (set (ifield f-imm1-311)
         (sra      (ifield f-imm21-311-198-201-3010-0) 19))
    (set (ifield f-uimm8-198)
         (and (sra (ifield f-imm21-311-198-201-3010-0) 11) #xff))
    (set (ifield f-uimm1-201)
         (and (sra (ifield f-imm21-311-198-201-3010-0) 10) #x1))
    (set (ifield f-uimm10-3010)
         (and      (ifield f-imm21-311-198-201-3010-0)     #x3ff)))
  )
  (extract (set (ifield f-imm21-311-198-201-3010-0)
    (or (or (sll (ifield f-imm1-311) 19)  (sll (ifield f-uimm8-198) 11))
        (or (sll (ifield f-uimm1-201) 10)      (ifield f-uimm10-3010))))
  )
  (encode (value pc) (sra DI value 1))
  (decode (value pc) (sll DI value 1))
)

(define-multi-ifield
  (name f-imm6-121-65)
  (comment "imm6 [12][6..2]")
  (attrs all-isas)
  (mode DI)
  (subfields f-imm1-121 f-uimm5-65)
  (insert (sequence ()
    (set (ifield f-imm1-121) (sra (ifield f-imm6-121-65) 5))
    (set (ifield f-uimm5-65) (and (ifield f-imm6-121-65) #x1f)))
  )
  (extract (sequence ()
    (set (ifield f-imm6-121-65) (or (sll (ifield f-imm1-121) 5) (ifield f-uimm5-65))))
  )
)

(define-multi-ifield
  (name f-uimm6-121-65)
  (comment "uimm6 [12][6..2]")
  (attrs all-isas)
  (mode UDI)
  (subfields f-uimm1-121 f-uimm5-65)
  (insert (sequence ()
    (set (ifield f-uimm1-121) (and (srl (ifield f-uimm6-121-65) 5) #x1))
    (set (ifield f-uimm5-65)  (and      (ifield f-uimm6-121-65)    #x1f)))
  )
  (extract (sequence ()
    (set (ifield f-uimm6-121-65) (or (sll (ifield f-uimm1-121) 5) (ifield f-uimm5-65))))
  )
)

(define-multi-ifield
  (name f-uimm18-121-65-000000000000)
  (comment "uimm18 [12][6..2]000000000000")
  (attrs all-isas)
  (mode UDI)
  (subfields f-uimm1-121 f-uimm5-65)
  (insert (sequence ()
    (set (ifield f-uimm1-121) (srl (ifield f-uimm18-121-65-000000000000) 5))
    (set (ifield f-uimm5-65)  (and (ifield f-uimm18-121-65-000000000000) #x1f)))
  )
  (extract (sequence ()
    (set (ifield f-uimm18-121-65-000000000000) (or (sll (ifield f-uimm1-121) 5) (ifield f-uimm5-65))))
  )
  (encode (value pc) (srl DI value 12))
  (decode (value pc) (sll DI value 12))
)

(define-multi-ifield
  (name f-imm9-121-62-21-112-42-0)
  (comment "imm9 [12][6..5][2][11..10][4..3]0")
  (attrs all-isas)
  (mode DI)
  (subfields f-imm1-121 f-uimm2-62 f-uimm1-21 f-uimm2-112 f-uimm2-42)
  (insert (sequence ()
    (set (ifield f-imm1-121)  (sra      (ifield f-imm9-121-62-21-112-42-0) 7))
    (set (ifield f-uimm2-62)  (and (srl (ifield f-imm9-121-62-21-112-42-0) 5) #x3))
    (set (ifield f-uimm1-21)  (and (srl (ifield f-imm9-121-62-21-112-42-0) 4) #x1))
    (set (ifield f-uimm2-112) (and (srl (ifield f-imm9-121-62-21-112-42-0) 2) #x3))
    (set (ifield f-uimm2-42)  (and      (ifield f-imm9-121-62-21-112-42-0)    #x3)))
  )
  (extract (sequence ()
    (set (ifield f-imm9-121-62-21-112-42-0)
      (or (or (or (sll (ifield f-imm1-121) 7) (sll (ifield f-uimm2-62)  5))
              (or (sll (ifield f-uimm1-21) 4) (sll (ifield f-uimm2-112) 2)))
          (ifield f-uimm2-42))))
  )
  (encode (value pc) (sra DI value 1))
  (decode (value pc) (sll DI value 1))
)

(define-multi-ifield
  (name f-uimm7-51-123-61-00)
  (comment "uimm7 [5][12..10][6]00")
  (attrs all-isas)
  (mode UDI)
  (subfields f-uimm1-51 f-uimm3-123 f-uimm1-61)
  (insert (sequence ()
    (set (ifield f-uimm1-51)  (and (srl (ifield f-uimm7-51-123-61-00) 4) #x1))
    (set (ifield f-uimm3-123) (and (srl (ifield f-uimm7-51-123-61-00) 1) #x7))
    (set (ifield f-uimm1-61)  (and      (ifield f-uimm7-51-123-61-00)    #x1)))
  )
  (extract (sequence ()
    (set (ifield f-uimm7-51-123-61-00)
      (or (or (sll (ifield f-uimm1-51) 4) (sll (ifield f-uimm3-123) 1))
          (ifield f-uimm1-61))))
  )
  (encode (value pc) (srl DI value 2))
  (decode (value pc) (sll DI value 2))
)

(define-multi-ifield
  (name f-uimm8-62-123-000)
  (comment "uimm8 [6..5][12..10]000")
  (attrs all-isas)
  (mode UDI)
  (subfields f-uimm2-62 f-uimm3-123)
  (insert (sequence ()
    (set (ifield f-uimm2-62)  (and (srl (ifield f-uimm8-62-123-000) 3) #x3))
    (set (ifield f-uimm3-123) (and      (ifield f-uimm8-62-123-000)    #x7)))
  )
  (extract (sequence ()
    (set (ifield f-uimm8-62-123-000)
      (or (sll (ifield f-uimm2-62) 3) (ifield f-uimm3-123))))
  )
  (encode (value pc) (srl DI value 3))
  (decode (value pc) (sll DI value 3))
)

(define-multi-ifield
  (name f-uimm10-104-122-51-61-00)
  (comment "uimm10 [10..7][12..11][5][6]00")
  (attrs all-isas)
  (mode UDI)
  (subfields f-uimm4-104 f-uimm2-122 f-uimm1-51 f-uimm1-61)
  (insert (sequence ()
    (set (ifield f-uimm4-104) (and (srl (ifield f-uimm10-104-122-51-61-00) 4) #xf))
    (set (ifield f-uimm2-122) (and (srl (ifield f-uimm10-104-122-51-61-00) 2) #x3))
    (set (ifield f-uimm1-51)  (and (srl (ifield f-uimm10-104-122-51-61-00) 1) #x1))
    (set (ifield f-uimm1-61)  (and      (ifield f-uimm10-104-122-51-61-00)    #x1)))
  )
  (extract (sequence ()
    (set (ifield f-uimm10-104-122-51-61-00)
      (or (or (sll (ifield f-uimm4-104) 4)
              (sll (ifield f-uimm2-122) 2))
          (or (sll (ifield f-uimm1-51)  1)
                   (ifield f-uimm1-61)))))
  )
  (encode (value pc) (srl DI value 2))
  (decode (value pc) (sll DI value 2))
)

(define-multi-ifield
  (name f-imm10-121-42-51-21-61-0000)
  (comment "imm10 [12][4..3][5][2][6]0000")
  (attrs all-isas)
  (mode DI)
  (subfields f-imm1-121 f-uimm2-42 f-uimm1-51 f-uimm1-21 f-uimm1-61)
  (insert (sequence ()
    (set (ifield f-imm1-121) (sra      (ifield f-imm10-121-42-51-21-61-0000) 5))
    (set (ifield f-uimm2-42) (and (srl (ifield f-imm10-121-42-51-21-61-0000) 3) #x3))
    (set (ifield f-uimm1-51) (and (srl (ifield f-imm10-121-42-51-21-61-0000) 2) #x1))
    (set (ifield f-uimm1-21) (and (srl (ifield f-imm10-121-42-51-21-61-0000) 1) #x1))
    (set (ifield f-uimm1-61) (and      (ifield f-imm10-121-42-51-21-61-0000)    #x1)))
  )
  (extract (sequence ()
    (set (ifield f-imm10-121-42-51-21-61-0000)
      (or (or (or (sll (ifield f-imm1-121) 5)
                  (sll (ifield f-uimm2-42) 3))
              (or (sll (ifield f-uimm1-51) 2)
                  (sll (ifield f-uimm1-21) 1)))
          (ifield f-uimm1-61))))
  )
  (encode (value pc) (sra DI value 4))
  (decode (value pc) (sll DI value 4))
)

(define-multi-ifield
  (name f-uimm9-93-123-000)
  (comment "uimm9 [9..7][12..10]000")
  (attrs all-isas)
  (mode UDI)
  (subfields f-uimm3-93 f-uimm3-123)
  (insert (sequence ()
    (set (ifield f-uimm3-93)  (and (srl (ifield f-uimm9-93-123-000) 3) #x7))
    (set (ifield f-uimm3-123) (and      (ifield f-uimm9-93-123-000)    #x7)))
  )
  (extract (sequence ()
    (set (ifield f-uimm9-93-123-000)
      (or (sll (ifield f-uimm3-93) 3) (ifield f-uimm3-123))))
  )
  (encode (value pc) (srl DI value 3))
  (decode (value pc) (sll DI value 3))
)

(define-multi-ifield
  (name f-uimm8-82-124-00)
  (comment "uimm8 [8..7][12..9]00")
  (attrs all-isas)
  (mode UDI)
  (subfields f-uimm2-82 f-uimm4-124)
  (insert (sequence ()
    (set (ifield f-uimm2-82)
         (and (srl (ifield f-uimm8-82-124-00) 4) #x3))
    (set (ifield f-uimm4-124)
         (and (ifield f-uimm8-82-124-00) #xf)))
  )
  (extract (sequence ()
    (set (ifield f-uimm8-82-124-00)
      (or (sll (ifield f-uimm2-82) 4) (ifield f-uimm4-124))))
  )
  (encode (value pc) (srl DI value 2))
  (decode (value pc) (sll DI value 2))
)

(define-multi-ifield
  (name f-imm12-121-81-102-61-71-21-111-53-0)
  (comment "imm12 [12][8][10..9][6][7][2][11][5..3]0")
  (attrs all-isas)
  (mode DI)
  (subfields f-imm1-121 f-uimm1-81 f-uimm2-102 f-uimm1-61 f-uimm1-71 f-uimm1-21 f-uimm1-111 f-uimm3-53)
  (insert (sequence ()
    (set (ifield f-imm1-121)
         (and (sra (ifield f-imm12-121-81-102-61-71-21-111-53-0) 10) #x1))
    (set (ifield f-uimm1-81)
         (and (srl (ifield f-imm12-121-81-102-61-71-21-111-53-0) 9)  #x1))
    (set (ifield f-uimm2-102)
         (and (srl (ifield f-imm12-121-81-102-61-71-21-111-53-0) 7)  #x3))
    (set (ifield f-uimm1-61)
         (and (srl (ifield f-imm12-121-81-102-61-71-21-111-53-0) 6)  #x1))
    (set (ifield f-uimm1-71)
         (and (srl (ifield f-imm12-121-81-102-61-71-21-111-53-0) 5)  #x1))
    (set (ifield f-uimm1-21)
         (and (srl (ifield f-imm12-121-81-102-61-71-21-111-53-0) 4)  #x1))
    (set (ifield f-uimm1-111)
         (and (srl (ifield f-imm12-121-81-102-61-71-21-111-53-0) 3)  #x1))
    (set (ifield f-uimm3-53)
         (and      (ifield f-imm12-121-81-102-61-71-21-111-53-0)     #x7)))
  )
  (extract (sequence ()
    (set (ifield f-imm12-121-81-102-61-71-21-111-53-0)
      (or (or (or (sll (ifield f-imm1-121) 10)
                  (sll (ifield f-uimm1-81)  9))
              (or (sll (ifield f-uimm2-102) 7)
                  (sll (ifield f-uimm1-61)  6)))
          (or (or (sll (ifield f-uimm1-71)  5)
                  (sll (ifield f-uimm1-21)  4))
              (or (sll (ifield f-uimm1-111) 3)
                       (ifield f-uimm3-53))))))
  )
  (encode (value pc) (sra DI value 1))
  (decode (value pc) (sll DI value 1))
)

(define-multi-ifield
  (name f-uimm8-32-121-63-00)
  (comment "uimm8 [3..2][12][6..4]00")
  (attrs all-isas)
  (mode UDI)
  (subfields f-uimm2-32 f-uimm1-121 f-uimm3-63)
  (insert (sequence ()
    (set (ifield f-uimm2-32)  (and (srl (ifield f-uimm8-32-121-63-00) 4) #x3))
    (set (ifield f-uimm1-121) (and (srl (ifield f-uimm8-32-121-63-00) 3) #x1))
    (set (ifield f-uimm3-63)  (and      (ifield f-uimm8-32-121-63-00)    #x7)))
  )
  (extract (sequence ()
    (set (ifield f-uimm8-32-121-63-00)
      (or (or (sll (ifield f-uimm2-32) 4) (sll (ifield f-uimm1-121) 3))
          (ifield f-uimm3-63))))
  )
  (encode (value pc) (srl DI value 2))
  (decode (value pc) (sll DI value 2))
)

(define-multi-ifield
  (name f-uimm9-43-121-62-000)
  (comment "uimm9 [4..2][12][6..5]000")
  (attrs all-isas)
  (mode UDI)
  (subfields f-uimm3-43 f-uimm1-121 f-uimm2-62)
  (insert (sequence ()
    (set (ifield f-uimm3-43)  (and (srl (ifield f-uimm9-43-121-62-000) 3) #x7))
    (set (ifield f-uimm1-121) (and (srl (ifield f-uimm9-43-121-62-000) 2) #x1))
    (set (ifield f-uimm2-62)  (and      (ifield f-uimm9-43-121-62-000)    #x3)))
  )
  (extract (sequence ()
    (set (ifield f-uimm9-43-121-62-000)
      (or (or (sll (ifield f-uimm3-43) 3) (sll (ifield f-uimm1-121) 2))
          (ifield f-uimm2-62))))
  )
  (encode (value pc) (srl DI value 3))
  (decode (value pc) (sll DI value 3))
)

;; Register operands

(define-operand
  (name rd)
  (comment "rd")
  (attrs all-isas)
  (type h-gpr)
  (index f-rd)
  (handlers (parse "gpr"))
)
(define-operand
  (name sp-reg)
  (comment "register tied to the stack pointer")
  (attrs all-isas)
  (type h-sp)
  (index f-dummy)
  (handlers (print "sp"))
)
(define-operand
  (name rs1)
  (comment "rs1")
  (attrs all-isas)
  (type h-gpr)
  (index f-rs1)
  (handlers (parse "gpr"))
)
(define-operand
  (name rs2)
  (comment "rs2")
  (attrs all-isas)
  (type h-gpr)
  (index f-rs2)
  (handlers (parse "gpr"))
)
(define-operand
  (name rs3)
  (comment "rs3")
  (attrs all-isas)
  (type h-gpr)
  (index f-rs3)
  (handlers (parse "gpr"))
)

;; Register fields for compressed instructions

(define-operand
  (name c-reg117)
  (comment "register field for compressed (11:7)")
  (attrs all-isas)
  (type h-gpr)
  (index f-uimm5-115)
)
(define-operand
  (name c-reg117-0)
  (comment "register field for compressed (11:7)")
  (attrs all-isas)
  (type h-zero)
  (index f-uimm5-115)
  (handlers (extract "zero"))
)
(define-operand
  (name c-reg117-ne0)
  (comment "register field for compressed (11:7)")
  (attrs all-isas)
  (type h-gpr-not-zero)
  (index f-uimm5-115)
)
(define-operand
  (name c-reg117-ne2)
  (comment "register field for compressed (11:7)")
  (attrs all-isas)
  (type h-gpr-not-sp)
  (index f-uimm5-115)
)
(define-operand
  (name c-reg117-ne0-ne2)
  (comment "register field for compressed (11:7)")
  (attrs all-isas)
  (type h-gpr-not-zero-or-sp)
  (index f-uimm5-115)
)
(define-operand
  (name c-reg62)
  (comment "register field for compressed (6:2)")
  (attrs all-isas)
  (type h-gpr)
  (index f-uimm5-65)
)
(define-operand
  (name c-reg62-ne0)
  (comment "register field for compressed (6:2)")
  (attrs all-isas)
  (type h-gpr-not-zero)
  (index f-uimm5-65)
)
(define-operand
  (name c-reg97)
  (comment "register field for compressed (9:7)")
  (attrs all-isas)
  (type h-c-gpr)
  (index f-uimm3-93)
)
(define-operand
  (name c-reg42)
  (comment "register field for compressed (4:2)")
  (attrs all-isas)
  (type h-c-gpr)
  (index f-uimm3-43)
)
(define-operand
  (name c-tied-regs97)
  (comment "tied register pair, encoded in [9:7]")
  (attrs all-isas)
  (type h-c-gpr)
  (index f-uimm3-93)
  (handlers (parse "tied_reg_pair") (print "tied_reg_pair"))
)
(define-operand
  (name c-tied-regs97-commutative)
  (comment "tied register pair, encoded in [9:7]")
  (attrs all-isas)
  (type h-c-gpr)
  (index f-uimm3-93)
  (handlers (parse "tied_reg_pair_commutative") (print "tied_reg_pair"))
)
(define-operand
  (name c-tied-regs117)
  (comment "tied register pair, encoded in [11:7]")
  (attrs all-isas)
  (type h-gpr)
  (index f-uimm5-115)
  (handlers (parse "tied_reg_pair") (print "tied_reg_pair"))
)
(define-operand
  (name c-tied-regs117-ne0)
  (comment "tied register pair, encoded in [11:7]")
  (attrs all-isas)
  (type h-gpr-not-zero)
  (index f-uimm5-115)
  (handlers (parse "tied_reg_pair") (print "tied_reg_pair"))
)
(define-operand
  (name c-tied-regs117-0-commutative)
  (comment "tied register pair, encoded in [11:7]")
  (attrs all-isas)
  (type h-zero)
  (index f-uimm5-115)
  (handlers (parse "tied_reg_pair_commutative") (print "tied_reg_pair"))
)
(define-operand
  (name c-tied-regs117-ne0-commutative)
  (comment "tied register pair, encoded in [11:7]")
  (attrs all-isas)
  (type h-gpr-not-zero)
  (index f-uimm5-115)
  (handlers (parse "tied_reg_pair_commutative") (print "tied_reg_pair"))
)
(define-operand
  (name c-tied-regs117-ne0-ne2)
  (comment "tied register pair, encoded in [11:7]")
  (attrs all-isas)
  (type h-gpr-not-zero-or-sp)
  (index f-uimm5-115)
  (handlers (parse "tied_reg_pair") (print "tied_reg_pair"))
)

(define-operand
  (name fl-rd)
  (comment "fl-rd")
  (attrs all-isas)
  (type h-fpr)
  (index f-rd)
)
(define-operand
  (name fl-rs1)
  (comment "fl-rs1")
  (attrs all-isas)
  (type h-fpr)
  (index f-rs1)
)
(define-operand
  (name fl-rs2)
  (comment "fl-rs2")
  (attrs all-isas)
  (type h-fpr)
  (index f-rs2)
)
(define-operand
  (name fl-rs3)
  (comment "fl-rs3")
  (attrs all-isas)
  (type h-fpr)
  (index f-rs3)
)
(define-operand
  (name fc-rs2)
  (comment "fp register field for compressed (4:2)")
  (attrs all-isas)
  (type h-c-fpr)
  (index f-uimm3-43)
)
(define-operand
  (name fc-rs3)
  (comment "fp register field for compressed (6:2)")
  (attrs all-isas)
  (type h-fpr)
  (index f-uimm5-65)
)
(define-operand
  (name fl-tied-regs1915)
  (comment "tied register pair, encoded in [19:15]")
  (attrs all-isas)
  (type h-fpr)
  (index f-uimm5-195)
  (handlers (parse "tied_reg_pair") (print "tied_reg_pair"))
)
(define-operand
  (name fl-dummy)
  (comment "fl-dummy")
  (attrs all-isas)
  (type h-fpr)
  (index f-dummy)
)

;; Special operands

(define-operand
  (name csr)
  (comment "csr")
  (attrs all-isas)
  (type h-csr)
  (mode UDI)
  (index f-csr)
  (handlers (parse "csr") (print "csr"))
)
(define-operand
  (name pred)
  (comment "pred")
  (attrs all-isas)
  (type h-uint)
  (mode UDI)
  (index f-pred)
  (handlers (parse "fence_succ_pred") (print "fence_succ_pred"))
)
(define-operand
  (name succ)
  (comment "succ")
  (attrs all-isas)
  (type h-uint)
  (mode UDI)
  (index f-succ)
  (handlers (parse "fence_succ_pred") (print "fence_succ_pred"))
)
(define-operand
  (name fl-rm)
  (comment "fl-rm")
  (attrs all-isas)
  (type h-uint)
  (mode UDI)
  (index f-funct3)
  (handlers (parse "float_rounding_mode") (print "float_rounding_mode"))
)
(define-operand
  (name tprel_add)
  (comment "Special field to attach a %tprel_add reloc to an add instruction")
  (attrs all-isas)
  (type h-sint)
  (mode DI)
  (index f-dummy)
  (handlers (parse "tprel_add"))
)

;; Immediate operands

; Some immediates have descriptive names, others follow the convention for
; field names, but without the "f-" prefix.

(define-operand
  (name imm-zero)
  (comment "imm operand which is always zero")
  (attrs all-isas)
  (type h-sint)
  (mode DI)
  (index f-dummy)
)
(define-operand
  (name uimm5)
  (comment "uimm5 [19..15]")
  (attrs all-isas)
  (type h-uint)
  (mode UDI)
  (index f-uimm5-195)
)
(define-operand
  (name uimm5-abs)
  (comment "uimm5 [19..15] (absolute)")
  (attrs all-isas)
  (type h-uint)
  (mode UDI)
  (index f-uimm5-195)
  (handlers (parse "uimm5_abs"))
)
(define-operand
  (name imm-lo12)
  (comment "Low 12-bits of a 32-bit uimmediate")
  (attrs all-isas)
  (type h-sint)
  (mode DI)
  (index f-imm12-3112)
  (handlers (parse "imm_lo12_i"))
)
(define-operand
  (name imm-lo12-abs)
  (comment "Low 12-bits of a 32-bit uimmediate (absolute)")
  (attrs all-isas)
  (type h-sint)
  (mode DI)
  (index f-imm12-3112)
  (handlers (parse "imm_lo12_abs"))
)
(define-operand
  (name uimm32-3120-000000000000)
  (comment "uimm12 [31..12]000000000000")
  (attrs all-isas)
  (type h-uint)
  (mode UDI)
  (index f-uimm32-3120-000000000000)
  (handlers (parse "uimm32_hi20") (print "uimm32_hi20"))
)
(define-operand
  (name store12)
  (comment "12-bit store offset")
  (attrs all-isas)
  (type h-sint)
  (mode DI)
  (index f-imm12-317-115)
  (handlers (parse "imm_lo12_s"))
)
(define-operand
  (name branch13)
  (comment "13-bit PC-relative branch")
  (attrs RELAX all-isas)
  (type h-sint)
  (mode DI)
  (index f-imm13-311-71-306-114-0)
  (handlers (parse "branch13"))
)
(define-operand
  (name jmp21)
  (comment "21-bit PC-relative jump")
  (attrs all-isas)
  (type h-sint)
  (mode DI)
  (index f-imm21-311-198-201-3010-0)
  (handlers (parse "jmp21"))
)
(define-operand
  (name imm6-121-65-abs)
  (comment "imm6 [12][6..2] (absolute)")
  (attrs all-isas)
  (type h-sint)
  (index f-imm6-121-65)
  (handlers (parse "imm6_abs"))
)
(define-operand
  (name nzuimm18-121-65-000000000000-abs)
  (comment "nzuimm18 [12][6..2]000000000000 (absolute)")
  (attrs all-isas)
  (type h-uint)
  (index f-uimm18-121-65-000000000000)
  (handlers (parse "nzuimm18_hi6_abs") (print "nzuimm18_hi6"))
)
(define-operand
  (name nzimm6-121-65-abs)
  (comment "nzimm6 [12][6..2] (absolute)")
  (attrs all-isas)
  (type h-sint)
  (index f-imm6-121-65)
  (handlers (parse "nzimm6_abs"))
)
(define-operand
  (name nzimm10-121-42-51-21-61-0000-abs)
  (comment "nzimm10 [12][4..3][5][2][6]0000 (absolute)")
  (attrs all-isas)
  (type h-sint)
  (index f-imm10-121-42-51-21-61-0000)
  (handlers (parse "nzimm10_mask4_abs"))
)
(define-operand
  (name cbranch9)
  (comment "13-bit PC-relative branch (C extension)")
  (attrs RELAX all-isas)
  (type h-sint)
  (index f-imm9-121-62-21-112-42-0)
  (handlers (parse "cbranch9"))
)
(define-operand
  (name cjmp12)
  (comment "12-bit PC-relative jump (C extension)")
  (comment "imm12 [12][8][10..9][6][7][2][11][5..3]0")
  (attrs RELAX all-isas)
  (type h-sint)
  (index f-imm12-121-81-102-61-71-21-111-53-0)
  (handlers (parse "cjmp12"))
)

(define-operand
  (name uimm5-245)
  (comment "uimm5 [24..20] (absolute)")
  (attrs all-isas)
  (type h-uint)
  (mode UDI)
  (index f-uimm5-245)
  (handlers (parse "uimm5_abs"))
)
(define-operand
  (name uimm6-256)
  (comment "uimm6 [25..20] (absolute)")
  (attrs all-isas)
  (type h-uint)
  (mode UDI)
  (index f-uimm6-256)
  (handlers (parse "uimm6_abs"))
)
(define-operand
  (name uimm9-93-123-000-abs)
  (comment "uimm9 [9..7][12..10]000 (absolute)")
  (attrs all-isas)
  (type h-uint)
  (index f-uimm9-93-123-000)
  (handlers (parse "uimm9_mask3_abs") (print "ldst_uimm"))
)
(define-operand
  (name uimm8-82-124-00-abs)
  (comment "uimm8 [8..7][12..9]00 (absolute)")
  (attrs all-isas)
  (type h-uint)
  (index f-uimm8-82-124-00)
  (handlers (parse "uimm8_mask2_abs") (print "ldst_uimm"))
)
(define-operand
  (name nzuimm10-104-122-51-61-00-abs)
  (comment "nzuimm10 [10..7][12..11][5][6]00" (absolute))
  (attrs all-isas)
  (type h-uint)
  (index f-uimm10-104-122-51-61-00)
  (handlers (parse "nzuimm10_mask2_abs"))
)
(define-operand
  (name nzuimm6-121-65-abs)
  (comment "nzuimm6 [12][6..2] (absolute)")
  (attrs all-isas)
  (type h-uint)
  (index f-uimm6-121-65)
  (handlers (parse "nzuimm6_abs"))
)
(define-operand
  (name uimm6-121-65-abs)
  (comment "uimm6 [12][6..2] (absolute)")
  (attrs all-isas)
  (type h-uint)
  (index f-uimm6-121-65)
  (handlers (parse "uimm6_abs"))
)
(define-operand
  (name uimm9-43-121-62-000-abs)
  (comment "uimm9 [4..2][12][6..5]000 (absolute)")
  (attrs all-isas)
  (type h-uint)
  (index f-uimm9-43-121-62-000)
  (handlers (parse "uimm9_mask3_abs") (print "ldst_uimm"))
)
(define-operand
  (name uimm8-32-121-63-00-abs)
  (comment "uimm8 [3..2][12][6..4]00 (absolute)")
  (attrs all-isas)
  (type h-uint)
  (index f-uimm8-32-121-63-00)
  (handlers (parse "uimm8_mask2_abs") (print "ldst_uimm"))
)
(define-operand
  (name uimm7-51-123-61-00-abs)
  (comment "uimm7 [5][12..10][6]00 (absolute)")
  (attrs all-isas)
  (type h-uint)
  (index f-uimm7-51-123-61-00)
  (handlers (parse "uimm7_mask2_abs") (print "ldst_uimm"))
)
(define-operand
  (name uimm8-62-123-000-abs)
  (comment "uimm8 [6..5][12..10]000 (absolute)")
  (attrs all-isas)
  (type h-uint)
  (index f-uimm8-62-123-000)
  (handlers (parse "uimm8_mask3_abs") (print "ldst_uimm"))
)

;; Instruction formats

;===------------------ Compressed instructions formats ----------------------===

; Raw instruction
; +---------------+
; |15            0|
; | <instruction> |
; +---------------+
(define-pmacro (rv-format-craw mnemonic attr instr sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic "")
    (+ (f-uimm16-1516 instr))
    sem ()))
; +--------+-----+------------+--------+
; |15    12|11  7|6          2|1      0|
; |<funct4>|<rs1>|<instr[6:2]>|<opcode>|
; +--------+-----+------------+--------+
(define-pmacro (rv-format-cr-1 mnemonic attr funct4 instr62 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg117-ne0}")
    (+ (f-c-funct4 funct4) c-reg117-ne0 (f-uimm5-65 instr62) (f-c-opcode opcode))
    sem ()))
; +--------+----+-----+--------+
; |15    12|11 7|6   2|1      0|
; |<funct4>|<rd>|<rs2>|<opcode>|
; +--------+----+-----+--------+
(define-pmacro (rv-format-cr-2 mnemonic attr funct4 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg117-ne0},${c-reg62-ne0}")
    (+ (f-c-funct4 funct4) c-reg117-ne0 c-reg62-ne0 (f-c-opcode opcode))
    sem ()))
; +--------+--------+-----+--------+
; |15    12|11     7|6   2|1      0|
; |<funct4>|<rs1/rd>|<rs2>|<opcode>|
; +--------+--------+-----+--------+
(define-pmacro (rv-format-cr-3 mnemonic attr funct4 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg117-ne0},${c-reg62-ne0}")
    (+ (f-c-funct4 funct4) c-reg117-ne0 c-reg62-ne0 (f-c-opcode opcode))
    sem ()))
; +--------+--------+-----+--------+
; |15    10|11     7|6   2|1      0|
; |<funct6>|<rs1/rd>|<rs2>|<opcode>|
; +--------+--------+-----+--------+
(define-pmacro (rv-format-cr-4 mnemonic attr funct6 instr65 sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg97},${c-reg42}")
    (+ (f-c-funct6 funct6) c-reg97 (f-uimm2-62 instr65) c-reg42 (f-c-opcode #b01))
    sem ()))
; +--------+--------+----+----------+--------+
; |15    13|   12   |11 7|6        2|1      0|
; |<funct3>|<imm[5]>|<rd>|<imm[4:0]>|<opcode>|
; +--------+--------+----+----------+--------+
(define-pmacro (rv-format-ci-1 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg117-ne0},${imm6-121-65-abs}")
    (+ (f-c-funct3 funct3) imm6-121-65-abs c-reg117-ne0 (f-c-opcode opcode))
    sem ()))
; +--------+--------+--------+----------+--------+
; |15    13|   12   |11     7|6        2|1      0|
; |<funct3>|<imm[5]>|<rd/rs1>|<imm[4:0]>|<opcode>|
; +--------+--------+--------+----------+--------+
(define-pmacro (rv-format-ci-2 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg117},${imm6-121-65-abs}")
    (+ (f-c-funct3 funct3) imm6-121-65-abs c-reg117 (f-c-opcode opcode))
    sem ()))
; +--------+---------+--------+------------+--------+
; |15    13|   12    |11     7|6          2|1      0|
; |<funct3>|<imm[17]>|<rd/rs1>|<imm[16:12]>|<opcode>|
; +--------+---------+--------+------------+--------+
(define-pmacro (rv-format-ci-3 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg117-ne0-ne2},${nzuimm18-121-65-000000000000-abs}")
    (+ (f-c-funct3 funct3) nzuimm18-121-65-000000000000-abs c-reg117-ne0-ne2 (f-c-opcode opcode))
    sem ()))
; +--------+---------+--------+-----------+--------+
; |15    13|   12    |11     7|6         2|1      0|
; |<funct3>|<uimm[5]>|<rd/rs1>|<uimm[4:0]>|<opcode>|
; +--------+---------+--------+-----------+--------+
(define-pmacro (rv-format-ci-4 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg117-ne0},${nzuimm6-121-65-abs}")
    (+ (f-c-funct3 funct3) nzuimm6-121-65-abs c-reg117-ne0 (f-c-opcode opcode))
    sem ()))
; +--------+---------+----+----------------+--------+
; |15    13|   12    |11 7|6              2|1      0|
; |<funct3>|<uimm[5]>|<rd>|<uimm[4:2][7:6]>|<opcode>|
; +--------+---------+----+----------------+--------+
(define-pmacro (rv-format-ci-5 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg117-ne0},${uimm8-32-121-63-00-abs}(${sp-reg})")
    (+ (f-c-funct3 funct3) uimm8-32-121-63-00-abs c-reg117-ne0 (f-c-opcode opcode))
    sem ()))
; +--------+---------+----+----------------+--------+
; |15    13|   12    |11 7|6              2|1      0|
; |<funct3>|<uimm[5]>|<rd>|<uimm[4:3][8:6]>|<opcode>|
; +--------+---------+----+----------------+--------+
(define-pmacro (rv-format-ci-6 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg117-ne0},${uimm9-43-121-62-000-abs}(${sp-reg})")
    (+ (f-c-funct3 funct3) uimm9-43-121-62-000-abs c-reg117-ne0 (f-c-opcode opcode))
    sem ()))
; +--------+---------+----+----------------+--------+
; |15    13|   12    |11 7|6              2|1      0|
; |<funct3>|<uimm[5]>|<rd>|<uimm[4:2][7:6]>|<opcode>|
; +--------+---------+----+----------------+--------+
(define-pmacro (rv-format-ci-7 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fl-rd},${uimm8-32-121-63-00-abs}(${sp-reg})")
    (+ (f-c-funct3 funct3) uimm8-32-121-63-00-abs fl-rd (f-c-opcode opcode))
    sem ()))
; +--------+---------+----+----------------+--------+
; |15    13|   12    |11 7|6              2|1      0|
; |<funct3>|<uimm[5]>|<rd>|<uimm[4:3][8:6]>|<opcode>|
; +--------+---------+----+----------------+--------+
(define-pmacro (rv-format-ci-8 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fl-rd},${uimm9-43-121-62-000-abs}(${sp-reg})")
    (+ (f-c-funct3 funct3) uimm9-43-121-62-000-abs fl-rd (f-c-opcode opcode))
    sem ()))
; +--------+--------+----+----------+--------+
; |15    13|   12   |11 7|6        2|1      0|
; |<funct3>|<imm[5]>|<rd>|<imm[4:0]>|<opcode>|
; +--------+--------+----+----------+--------+
(define-pmacro (rv-format-ci-9 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg117},${imm6-121-65-abs}")
    (+ (f-c-funct3 funct3) imm6-121-65-abs c-reg117 (f-c-opcode opcode))
    sem ()))
; +--------+---------+--------+-----------+--------+
; |15    13|   12    |11     7|6         2|1      0|
; |<funct3>|<uimm[5]>|<rd/rs1>|<uimm[4:0]>|<opcode>|
; +--------+---------+--------+-----------+--------+
(define-pmacro (rv-format-ci-10 mnemonic attr funct3 uimm1 uimm5 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg117}")
    (+ (f-c-funct3 funct3) (f-uimm1-121 uimm1) (f-uimm5-65 uimm5) c-reg117 (f-c-opcode opcode))
   sem ()))
; +--------+----------------+-----+--------+
; |15    13|12             7|6   2|1      0|
; |<funct3>|<uimm[5:2][7:6]>|<rs2>|<opcode>|
; +--------+----------------+-----+--------+
(define-pmacro (rv-format-css-1 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg62},${uimm8-82-124-00-abs}(${sp-reg})")
    (+ (f-c-funct3 funct3) uimm8-82-124-00-abs c-reg62 (f-c-opcode opcode))
    sem ()))
; +--------+----------------+-----+--------+
; |15    13|12             7|6   2|1      0|
; |<funct3>|<uimm[5:3][8:6]>|<rs2>|<opcode>|
; +--------+----------------+-----+--------+
(define-pmacro (rv-format-css-2 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg62},${uimm9-93-123-000-abs}(${sp-reg})")
    (+ (f-c-funct3 funct3) uimm9-93-123-000-abs c-reg62 (f-c-opcode opcode))
    sem ()))
; +--------+----------------+-----+--------+
; |15    13|12             7|6   2|1      0|
; |<funct3>|<uimm[5:2][7:6]>|<rs2>|<opcode>|
; +--------+----------------+-----+--------+
(define-pmacro (rv-format-css-3 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fc-rs3},${uimm8-82-124-00-abs}(${sp-reg})")
    (+ (f-c-funct3 funct3) uimm8-82-124-00-abs fc-rs3 (f-c-opcode opcode))
    sem ()))
; +--------+----------------+-----+--------+
; |15    13|12             7|6   2|1      0|
; |<funct3>|<uimm[5:3][8:6]>|<rs2>|<opcode>|
; +--------+----------------+-----+--------+
(define-pmacro (rv-format-css-4 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fc-rs3},${uimm9-93-123-000-abs}(${sp-reg})")
    (+ (f-c-funct3 funct3) uimm9-93-123-000-abs fc-rs3 (f-c-opcode opcode))
    sem ()))
; +--------+-----------+-----+-----------+----+--------+
; |15    13|12       10|9   7|6         5|4  2|1      0|
; |<funct3>|<uimm[5:3]>|<rs1>|<uimm[2|6]>|<rd>|<opcode>|
; +--------+-----------+-----+-----------+----+--------+
(define-pmacro (rv-format-cl-1 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg42},${uimm7-51-123-61-00-abs}(${c-reg97})")
    (+ (f-c-funct3 funct3) uimm7-51-123-61-00-abs c-reg97 c-reg42 (f-c-opcode opcode))
    sem ()))
; +--------+-----------+-----+-----------+----+--------+
; |15    13|12       10|9   7|6         5|4  2|1      0|
; |<funct3>|<uimm[5:3]>|<rs1>|<uimm[7:6]>|<rd>|<opcode>|
; +--------+-----------+-----+-----------+----+--------+
(define-pmacro (rv-format-cl-2 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg42},${uimm8-62-123-000-abs}(${c-reg97})")
    (+ (f-c-funct3 funct3) uimm8-62-123-000-abs c-reg97 c-reg42 (f-c-opcode opcode))
    sem ()))
; +--------+-----------+-----+-----------+----+--------+
; |15    13|12       10|9   7|6         5|4  2|1      0|
; |<funct3>|<uimm[5:3]>|<rs1>|<uimm[2|6]>|<rd>|<opcode>|
; +--------+-----------+-----+-----------+----+--------+
(define-pmacro (rv-format-cl-3 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fc-rs2},${uimm7-51-123-61-00-abs}(${c-reg97})")
    (+ (f-c-funct3 funct3) uimm7-51-123-61-00-abs fc-rs2 c-reg97 (f-c-opcode opcode))
    sem ()))
; +--------+-----------+-----+-----------+----+--------+
; |15    13|12       10|9   7|6         5|4  2|1      0|
; |<funct3>|<uimm[5:3]>|<rs1>|<uimm[7:6]>|<rd>|<opcode>|
; +--------+-----------+-----+-----------+----+--------+
(define-pmacro (rv-format-cl-4 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fc-rs2},${uimm8-62-123-000-abs}(${c-reg97})")
    (+ (f-c-funct3 funct3) uimm8-62-123-000-abs fc-rs2 c-reg97 (f-c-opcode opcode))
    sem ()))
; +--------+-----------+-----+-----------+--- -+--------+
; |15    13|12       10|9   7|6         5|4   2|1      0|
; |<funct3>|<uimm[5:3]>|<rs1>|<uimm[2|6]>|<rs2>|<opcode>|
; +--------+-----------+-----+-----------+-----+--------+
(define-pmacro (rv-format-cs-1 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg42},${uimm7-51-123-61-00-abs}(${c-reg97})")
    (+ (f-c-funct3 funct3) uimm7-51-123-61-00-abs c-reg97 c-reg42 (f-c-opcode opcode))
    sem ()))
; +--------+-----------+-----+-----------+-----+--------+
; |15    13|12       10|9   7|6         5|4   2|1      0|
; |<funct3>|<uimm[5:3]>|<rs1>|<uimm[7:6]>|<rs2>|<opcode>|
; +--------+-----------+-----+-----------+-----+--------+
(define-pmacro (rv-format-cs-2 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg42},${uimm8-62-123-000-abs}(${c-reg97})")
    (+ (f-c-funct3 funct3) uimm8-62-123-000-abs c-reg97 c-reg42 (f-c-opcode opcode))
    sem ()))
; +--------+-----------+-----+-----------+--- -+--------+
; |15    13|12       10|9   7|6         5|4   2|1      0|
; |<funct3>|<uimm[5:3]>|<rs1>|<uimm[2|6]>|<rs2>|<opcode>|
; +--------+-----------+-----+-----------+-----+--------+
(define-pmacro (rv-format-cs-3 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fc-rs2},${uimm7-51-123-61-00-abs}(${c-reg97})")
    (+ (f-c-funct3 funct3) uimm7-51-123-61-00-abs fc-rs2 c-reg97 (f-c-opcode opcode))
    sem ()))
; +--------+-----------+-----+-----------+-----+--------+
; |15    13|12       10|9   7|6         5|4   2|1      0|
; |<funct3>|<uimm[5:3]>|<rs1>|<uimm[7:6]>|<rs2>|<opcode>|
; +--------+-----------+-----+-----------+-----+--------+
(define-pmacro (rv-format-cs-4 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fc-rs2},${uimm8-62-123-000-abs}(${c-reg97})")
    (+ (f-c-funct3 funct3) uimm8-62-123-000-abs fc-rs2 c-reg97 (f-c-opcode opcode))
    sem ()))
; +--------+--------------+-----+-------------------+--------+
; |15    13|12          10|9   7|6                 2|1      0|
; |<funct3>|<simm[8][4:3]>|<rs1>|<simm[7:6][2:1][5]>|<opcode>|
; +--------+--------------+-----+-------------------+--------+
(define-pmacro (rv-format-cb-1 mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic
    (.splice (.unsplice attr) RELAXABLE)
    (.str mnemonic " ${c-reg97},${cbranch9}")
    (+ (f-c-funct3 funct3) cbranch9 c-reg97 (f-c-opcode opcode))
    sem ()))
; +--------+----------+-------+--------+-------------+--------+
; |15    13|    12    |11   10|9      7|6           2|1      0|
; |<funct3>|<nzuimm[5]|<instr>|<rs1/rd>|<nzuimm[4:0]>|<opcode>|
; +--------+----------+-------+--------+-------------+--------+
(define-pmacro (rv-format-cb-2 mnemonic attr funct3 instr112 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg97},${nzuimm6-121-65-abs}")
    (+ (f-c-funct3 funct3) (f-uimm2-112 instr112) nzuimm6-121-65-abs c-reg97 (f-c-opcode opcode))
    sem ()))
; +--------+--------+-------+--------+----------+--------+
; |15    13|   12   |11   10|9      7|6        2|1      0|
; |<funct3>|<imm[5]>|<instr>|<rs1/rd>|<imm[4:0]>|<opcode>|
; +--------+--------+-------+--------+----------+--------+
(define-pmacro (rv-format-cb-3 mnemonic attr funct3 instr112 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg97},${imm6-121-65-abs}")
    (+ (f-c-funct3 funct3) (f-uimm2-112 instr112) imm6-121-65-abs c-reg97 (f-c-opcode opcode))
    sem ()))
; +--------+----------+-------+--------+-------------+--------+
; |15    13|    12    |11   10|9      7|6           2|1      0|
; |<funct3>|<uimm[5]|<instr>|<rs1/rd>|<uimm[4:0]>|<opcode>|
; +--------+----------+-------+--------+-------------+--------+
(define-pmacro (rv-format-cb-4 mnemonic attr funct3 uimm1 instr112 uimm5 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${c-reg97}")
    (+ (f-c-funct3 funct3) (f-uimm1-121 uimm1) (f-uimm2-112 instr112) (f-uimm5-65 uimm5) c-reg97 (f-c-opcode opcode))
    sem ()))
; +--------+-------------+--------+
; |15    13|12          2|1      0|
; |<funct3>|<jump-target>|<opcode>|
; +--------+-------------+--------+
(define-pmacro (rv-format-cj mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic
    (.splice (.unsplice attr) RELAXABLE)
    (.str mnemonic " ${cjmp12}")
    (+ (f-c-funct3 funct3) cjmp12 (f-c-opcode opcode))
    sem ()))

;===----------------- Uncompressed instructions formats ---------------------===

; Raw instruction
; +---------------+
; |31            0|
; | <instruction> |
; +---------------+
(define-pmacro (rv-format-raw mnemonic attr instr sem)
  (dni mnemonic mnemonic attr
    mnemonic
    (+ (f-uimm32-3132 instr))
    sem ()))

; Base Instruction Format R-type
; +--------+-----+-----+--------+----+--------+
; |31    25|24 20|19 15|14    12|11 7|6      0|
; |<funct7>|<rs2>|<rs1>|<funct3>|<rd>|<opcode>|
; +--------+-----+-----+--------+----+--------+
(define-pmacro (rv-format-r mnemonic attr funct7 funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${rd},${rs1},${rs2}")
    (+ (f-funct7 funct7) rs2 rs1 (f-funct3 funct3) rd (f-opcode opcode))
    sem ()))

; Base Instruction Format I-type
; +-----------+-----+--------+----+--------+
; |31       20|19 15|14    12|11 7|6      0|
; |<imm[11:0]>|<rs1>|<funct3>|<rd>|<opcode>|
; +-----------+-----+--------+----+--------+
(define-pmacro (rv-format-i mnemonic attr asm funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic asm)
    (+ imm-lo12 rs1 (f-funct3 funct3) rd (f-opcode opcode))
    sem ()))
; Assembly variant 1 - "mnemonic rd,rs1,imm[11:0]"
(define-pmacro (rv-format-i-1 mnemonic attr funct3 opcode sem)
  (rv-format-i mnemonic attr " ${rd},${rs1},${imm-lo12}"  funct3 opcode sem))
; Assembly variant 2 - "mnemonic rd,imm[11:0](rs1)"
(define-pmacro (rv-format-i-2 mnemonic attr funct3 opcode sem)
  (rv-format-i mnemonic attr " ${rd},${imm-lo12}(${rs1})" funct3 opcode sem))

; Shift5/Shift6 - Shifts by a 5 or 6-bit immediate value
; +-------+-------+-----+--------+----+--------+
; |31   25|24   20|19 15|14    12|11 7|6      0|
; |<func7>|<shamt>|<rs1>|<funct3>|<rd>|<opcode>|
; +-------+-------+-----+--------+----+--------+
(define-pmacro (rv-format-shift5 mnemonic attr funct7 funct3 opcode sem)
  (dni (.str mnemonic "-shift5") mnemonic attr
    (.str mnemonic " ${rd},${rs1},${uimm5-245}")
    (+ (f-funct7 funct7) uimm5-245 rs1 (f-funct3 funct3) rd (f-opcode opcode))
    sem ()))
; +-------+-------+-----+--------+----+--------+
; |31   26|25   20|19 15|14    12|11 7|6      0|
; |<func6>|<shamt>|<rs1>|<funct3>|<rd>|<opcode>|
; +-------+-------+-----+--------+----+--------+
(define-pmacro (rv-format-shift6 mnemonic attr funct6 funct3 opcode sem)
  (dni (.str mnemonic "-shift6") mnemonic attr
    (.str mnemonic " ${rd},${rs1},${uimm6-256}")
    (+ (f-funct6 funct6) uimm6-256 rs1 (f-funct3 funct3) rd (f-opcode opcode))
    sem ()))

; Base Instruction Format S-type
; +-----------+-----+-----+--------+----------+--------+
; |31       25|24 20|19 15|14    12|11       7|6      0|
; |<imm[11:5]>|<rs2>|<rs1>|<funct3>|<imm[4:0]>|<opcode>|
; +-----------+-----+-----+--------+----------+--------+
(define-pmacro (rv-format-s mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${rs2},${store12}(${rs1})")
    (+ store12 rs2 rs1 (f-funct3 funct3) (f-opcode opcode))
    sem ()))

; Base Instruction Format B-type
; +---------+-----------+-----+-----+--------+----------+---------+--------+
; |    31   |30       25|24 20|19 15|14    12|11       8|    7    |6      0|
; |<imm[12]>|<imm[10:5]>|<rs2>|<rs1>|<funct3>|<imm[4:1]>|<imm[11]>|<opcode>|
; +---------+-----------+-----+-----+--------+----------+---------+--------+
(define-pmacro (rv-format-b mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic (.splice (.unsplice attr) RELAXABLE)
    (.str mnemonic " ${rs1},${rs2},${branch13}")
    (+ branch13 rs2 rs1 (f-funct3 funct3) (f-opcode opcode))
    sem ()))

; Base Instruction Format U-type
; +------------+----+--------+
; |31        12|11 7|6      0|
; |<imm[31:12]>|<rd>|<opcode>|
; +------------+----+--------+
(define-pmacro (rv-format-u mnemonic attr opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${rd},${uimm32-3120-000000000000}")
    (+ uimm32-3120-000000000000 rd (f-opcode opcode))
    sem ()))

; Base Instruction Format J-type
; +---------+-----------+---------+------------+----+--------+
; |    31   |30       21|    20   |19        12|11 7|6      0|
; |<imm[20]>|<imm[10:1]>|<imm[11]>|<imm[19:12]>|<rd>|<opcode>|
; +---------+-----------+---------+------------+----+--------+
(define-pmacro (rv-format-j mnemonic attr opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${rd},${jmp21}")
    (+ jmp21 rd (f-opcode opcode))
    sem ()))

; CSR reading/writing instructions using a register
; +-----+-----+--------+----+--------+
; |31 20|19 15|14    12|11 7|6      0|
; |<csr>|<rs1>|<funct3>|<rd>|<opcode>|
; +-----+-----+--------+----+--------+
(define-pmacro (rv-format-csr-reg mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${rd},${csr},${rs1}")
    (+ csr rs1 (f-funct3 funct3) rd (f-opcode opcode))
    sem ()))

; CSR reading/writing instructions using an unsigned 5-bit immediate
; +-----+-----------+--------+----+--------+
; |31 20|19       15|14    12|11 7|6      0|
; |<csr>|<uimm[4:0]>|<funct3>|<rd>|<opcode>|
; +-----+-----------+--------+----+--------+
(define-pmacro (rv-format-csr-imm mnemonic attr funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${rd},${csr},${uimm5}")
    (+ csr uimm5 (f-funct3 funct3) rd (f-opcode opcode))
    sem ()))

; Fence/SFence instruction
; +--------------+------+------+-------------+
; |31          28|27  24|23  20|19          0|
; |<instr[31:28]>|<pred>|<succ>|<instr[19:0]>|
; +--------------+------+------+-------------+
(define-pmacro (rv-format-fence mnemonic attr instr3128 instr190 sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${succ},${pred}")
    (+ (f-uimm4-314 instr3128) pred succ (f-uimm20-1920 instr190))
    sem ()))
(define-pmacro (rv-format-sfence-vm mnemonic attr instr3120 instr140 sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${rs1}")
    (+ (f-uimm12-3112 instr3120) rs1 (f-uimm15-1415 instr140))
    sem ()))
(define-pmacro (rv-format-sfence-vma mnemonic attr instr3125 instr140 sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${rs1},${rs2}")
    (+ (f-uimm7-317 instr3125) rs1 rs2 (f-uimm15-1415 instr140))
    sem ()))

; Multiplication instruction
; +--------+------+-----+--------+----+--------+
; |31    25|24  20|19 15|14    12|11 7|6      0|
; |<funct7>|<rsc2>|<rs1>|<funct3>|<rd>|<opcode>|
; +--------+------+-----+--------+----+--------+
(define-pmacro (rv-format-multi mnemonic attr funct7 funct3 opcode sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${rd},${rs1},${rs2}")
    (+ (f-funct7 funct7) rs2 rs1 (f-funct3 funct3) rd (f-opcode opcode))
    sem ()))

; Atomic instructions
; When rl = 1, release access
; When aq = 1, aquire access
; When aq = 1 && rl = 1, sequentially consistent
; +--------+----+----+-----+-----+--------+----+--------+
; |31    27| 26 | 25 |24 20|19 15|14    12|11 7|6      0|
; |<funct5>|<aq>|<rl>|<rs2>|<rs1>|<funct3>|<rd>|<opcode>|
; +--------+----+----+-----+-----+--------+----+--------+
(define-pmacro (rv-format-a-1 mnemonic attr funct5 funct3 aq rl sem)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${rd},${imm-zero}(${rs1})")
    (+ (f-funct5 funct5) (f-aq aq) (f-rl rl) (f-rs2 0) rs1 (f-funct3 funct3) rd (f-opcode #b0101111))
    sem ()))
(define-pmacro (rv-format-a-2 mnemonic attr funct5 funct3 aq rl sem)
  (dni mnemonic menmonic attr
    (.str mnemonic " ${rd},${rs2},${imm-zero}(${rs1})")
    (+ (f-funct5 funct5) (f-aq aq) (f-rl rl) rs2 rs1 (f-funct3 funct3) rd (f-opcode #b0101111))
    sem ()))

; Floating point instruction formats
; +-----------+-----+-----+----+--------+
; |31       20|19 15|14 12|11 7|6      0|
; |<imm[11:0]>|<rs1>| <rm>|<rd>|<opcode>|
; +-----------+-----+------+-----+------+
(define-pmacro (rv-format-f-1 mnemonic attr funct3 opcode)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fl-rd},${imm-lo12}(${rs1})")
    (+ imm-lo12 rs1 (f-funct3 funct3) fl-rd (f-opcode opcode))
    (nop) ()))
; +-----------+-----+-----+-----+----------+--------+
; |31       25|24 20|19 15|14 12|11       7|6      0|
; |<imm[11:5]>|<rs2>|<rs1>| <rm>|<imm[4:0]>|<opcode>|
; +-----------+-----+-----+-----+----------+--------+
(define-pmacro (rv-format-f-2 mnemonic attr funct3 opcode)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fl-rs2},${store12}(${rs1})")
    (+ store12 fl-rs2 rs1 (f-funct3 funct3) (f-opcode opcode))
    (nop) ()))
; +-----+-----+-----+-----+-----+----+--------+
; |31 27|26 25|24 20|19 15|14 12|11 7|6      0|
; |<rs3>|<fp2>|<rs2>|<rs1>| <rm>|<rd>|<opcode>|
; +-----+-----+-----+-----+-----+----+--------+
(define-pmacro (rv-format-f-3-rm mnemonic attr fp2 opcode)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fl-rd},${fl-rs1},${fl-rs2},${fl-rs3},${fl-rm}")
    (+ fl-rs3 (f-fp2 fp2) fl-rs2 fl-rs1 fl-rm fl-rd (f-opcode opcode))
    (nop) ()))
; +--------+-----+-----+-----+----+--------+
; |31    25|24 20|19 15|14 12|11 7|6      0|
; |<funct7>|<rs2>|<rs1>| <rm>|<rd>|<opcode>|
; +--------+-----+-----+-----+----+--------+
(define-pmacro (rv-format-f-4 mnemonic attr funct7 funct3 opcode)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fl-rd},${fl-rs1},${fl-rs2}")
    (+ (f-funct7 funct7) fl-rs2 fl-rs1 (f-funct3 funct3) fl-rd (f-opcode opcode))
    (nop) ()))
(define-pmacro (rv-format-f-4-rm mnemonic attr funct7 opcode)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fl-rd},${fl-rs1},${fl-rs2},${fl-rm}")
    (+ (f-funct7 funct7) fl-rs2 fl-rs1 fl-rm fl-rd (f-opcode opcode))
    (nop) ()))
; +--------+-----+-----+-----+----+--------+
; |31    25|24 20|19 15|14 12|11 7|6      0|
; |<funct7>|<rs2>|<rs1>| <rm>|<rd>|<opcode>|
; +--------+-----+-----+-----+----+--------+
(define-pmacro (rv-format-f-5 mnemonic attr funct7 reg funct3 opcode)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fl-rd},${fl-rs1}")
    (+ (f-funct7 funct7) (f-rs2 reg) fl-rs1 (f-funct3 funct3) fl-rd (f-opcode opcode))
    (nop) ()))
(define-pmacro (rv-format-f-5-rm mnemonic attr funct7 reg opcode)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fl-rd},${fl-rs1},${fl-rm}")
    (+ (f-funct7 funct7) (f-rs2 reg) fl-rs1 fl-rm fl-rd (f-opcode opcode))
    (nop) ()))
; +--------+-----+-----+-----+----+--------+
; |31    25|24 20|19 15|14 12|11 7|6      0|
; |<funct7>|<rs2>|<rs1>| <rm>|<rd>|<opcode>|
; +--------+-----+-----+-----+----+--------+
(define-pmacro (rv-format-f-6 mnemonic attr funct7 reg funct3 opcode)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fl-rd},${rs1}")
    (+ (f-funct7 funct7) (f-rs2 reg) rs1 (f-funct3 funct3) fl-rd (f-opcode opcode))
    (nop) ()))
(define-pmacro (rv-format-f-6-rm mnemonic attr funct7 reg opcode)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${fl-rd},${rs1},${fl-rm}")
    (+ (f-funct7 funct7) (f-rs2 reg) rs1 fl-rm fl-rd (f-opcode opcode))
    (nop) ()))
; +--------+-----+-----+-----+----+--------+
; |31    25|24 20|19 15|14 12|11 7|6      0|
; |<funct7>|<rs2>|<rs1>| <rm>|<rd>|<opcode>|
; +--------+-----+-----+-----+----+--------+
(define-pmacro (rv-format-f-7 mnemonic attr funct7 reg funct3 opcode)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${rd},${fl-rs1}")
    (+ (f-funct7 funct7) (f-rs2 reg) fl-rs1 (f-funct3 funct3) rd (f-opcode opcode))
    (nop) ()))
(define-pmacro (rv-format-f-7-rm mnemonic attr funct7 reg opcode)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${rd},${fl-rs1},${fl-rm}")
    (+ (f-funct7 funct7) (f-rs2 reg) fl-rs1 fl-rm rd (f-opcode opcode))
    (nop) ()))
; +--------+-----+-----+-----+----+--------+
; |31    25|24 20|19 15|14 12|11 7|6      0|
; |<funct7>|<rs2>|<rs1>| <rm>|<rd>|<opcode>|
; +--------+-----+-----+-----+----+--------+
(define-pmacro (rv-format-f-8 mnemonic attr funct7 funct3 opcode)
  (dni mnemonic mnemonic attr
    (.str mnemonic " ${rd},${fl-rs1},${fl-rs2}")
    (+ (f-funct7 funct7) fl-rs2 fl-rs1 (f-funct3 funct3) rd (f-opcode opcode))
    (nop) ()))

;; Instructions
;;
;; We have defined a set of macros above which will not be called to
;; specify each of the instructions in the ISA.
;; The macros above are really just utilities to save us from
;; the verbosity of writing a `dni` specification for each instructions,
;; there's nothing else fancy going on.
;;
;; For most of the instructions below we have chosen to write them as:
;; (macro-name mnemonic-str attribute-list
;;   binary-fields ...
;;   semantics)
;===-------------------- 'C' extension instructions -------------------------===

(dni c.addi16sp "c.addi16sp" (all-isas c-ext c-machs)
  "c.addi16sp ${sp-reg},${nzimm10-121-42-51-21-61-0000-abs}"
  (+ (f-c-funct3 #b011) nzimm10-121-42-51-21-61-0000-abs (f-uimm5-115 #b00010) (f-c-opcode #b01))
  (set (reg h-gpr 2) (add (reg h-gpr 2) nzimm10-121-42-51-21-61-0000-abs))
  ())
(dni c.addi4spn "c.addi4spn" (all-isas c-ext c-machs)
  "c.addi4spn ${c-reg42},${sp-reg},${nzuimm10-104-122-51-61-00-abs}"
  (+ (f-c-funct3 #b000) nzuimm10-104-122-51-61-00-abs c-reg42 (f-c-opcode #b00))
  (set c-reg42 (add (reg h-gpr 2) nzuimm10-104-122-51-61-00-abs))
  ())
(rv-format-craw  "c.nop" (all-isas c-ext c-machs)
  #b0000000000000001
  (nop))
(rv-format-craw  "c.ebreak" (all-isas c-ext c-machs)
  #b1001000000000010
  ; Do exception entry handling in C function
  (raise-exception EXCEPT-EBREAK))
(rv-format-craw  "c.unimp"  (all-isas c-ext c-machs)
  #b0000000000000000
  (nop))
(rv-format-cr-1  "c.jr"     (all-isas c-ext c-machs)
  #b1000 #b00000 #b10
  (set pc c-reg117-ne0))
(rv-format-cr-1  "c.jalr"   (all-isas c-ext c-machs)
  #b1001 #b00000 #b10
  (sequence ((WI dst-reg))
    (set dst-reg rd)
    (set (reg h-gpr 1) (add pc 2))
    (set pc dst-reg)))
(rv-format-cr-2  "c.mv"   (all-isas c-ext c-machs)
  #b1000 #b10
  (set c-reg117-ne0 c-reg62-ne0))
(rv-format-cr-3  "c.add"  (all-isas c-ext c-machs)
  #b1001 #b10
  (set c-reg117-ne0 (add c-reg117-ne0 c-reg62-ne0)))
(rv-format-cr-4  "c.and"  (all-isas c-ext c-machs)
  #b100011 #b11
  (set c-reg97 (and c-reg97 c-reg42)))
(rv-format-cr-4  "c.or"   (all-isas c-ext c-machs)
  #b100011 #b10
  (set c-reg97 (or  c-reg97 c-reg42)))
(rv-format-cr-4  "c.xor"  (all-isas c-ext c-machs)
  #b100011 #b01
  (set c-reg97 (xor c-reg97 c-reg42)))
(rv-format-cr-4  "c.sub"  (all-isas c-ext c-machs)
  #b100011 #b00
  (set c-reg97 (sub c-reg97 c-reg42)))
(rv-format-ci-9  "c.li"   (all-isas c-ext c-machs NO-DIS)
  #b010 #b01
  (set c-reg117-ne0 imm6-121-65-abs))
(rv-format-ci-3  "c.lui"  (all-isas c-ext c-machs)
  #b011 #b01
  (set c-reg117-ne0-ne2 (sra (sll SI nzuimm18-121-65-000000000000-abs 14) 14)))
(rv-format-ci-2  "c.addi" (all-isas c-ext c-machs)
  #b000 #b01
  (set c-reg117 (add c-reg117 imm6-121-65-abs)))
(rv-format-ci-4  "c.slli" (all-isas c-ext c-machs)
  #b000 #b10
  (set c-reg117-ne0 (sll c-reg117-ne0 nzuimm6-121-65-abs)))
(rv-format-ci-5  "c.lwsp" (all-isas c-ext c-machs)
  #b010 #b10
  (set c-reg117-ne0 (mem SI (add (reg h-gpr 2) uimm8-32-121-63-00-abs))))
(rv-format-css-1 "c.swsp" (all-isas c-ext c-machs)
  #b110 #b10
  (set (mem USI (add (reg h-gpr 2) uimm8-82-124-00-abs)) c-reg62))
(rv-format-cl-1  "c.lw"   (all-isas c-ext c-machs)
  #b010 #b00
  (set c-reg42 (mem SI (add c-reg97 uimm7-51-123-61-00-abs))))
(rv-format-cs-1  "c.sw"   (all-isas c-ext c-machs)
  #b110 #b00
  (set (mem USI (add c-reg97 uimm7-51-123-61-00-abs)) c-reg42))
(rv-format-cb-2  "c.srli" (all-isas c-ext c-machs)
  #b100 #b00 #b01
  (set c-reg97 (srl c-reg97 nzuimm6-121-65-abs)))
(rv-format-cb-2  "c.srai" (all-isas c-ext c-machs)
  #b100 #b01 #b01
  (set c-reg97 (sra c-reg97 nzuimm6-121-65-abs)))
(rv-format-cb-3  "c.andi" (all-isas c-ext c-machs)
  #b100 #b10 #b01
  (set c-reg97 (and c-reg97 imm6-121-65-abs)))
(rv-format-cb-1  "c.beqz" (all-isas c-ext c-machs)
  #b110 #b01
  (if (eq c-reg97 0) (set pc (add pc cbranch9))))
(rv-format-cb-1  "c.bnez" (all-isas c-ext c-machs)
  #b111 #b01
  (if (ne c-reg97 0) (set pc (add pc cbranch9))))
(rv-format-cj    "c.j"    (all-isas c-ext c-machs)
  #b101 #b01
  (set pc (add pc cjmp12)))

; RV32/64C hints (these are instructions in RV128C)
(rv-format-ci-10 "c.slli64" (all-isas c-ext)
  #b000      #b0 #b00000 #b10 (nop))
(rv-format-cb-4  "c.srli64" (all-isas c-ext)
  #b100 #b0 #b00 #b00000 #b01 (nop))
(rv-format-cb-4  "c.srai64" (all-isas c-ext)
  #b100 #b0 #b01 #b00000 #b01 (nop))

;RV32C
(rv-format-cj "c.jal" ((ISA rv32) (RVEXT RV32C) rv32c-machs) 
  #b001 #b01
  (sequence ()
    (set (reg h-gpr 1) (add pc 2))
    (set pc (add pc cjmp12))))

;RV64C
(rv-format-cr-4  "c.addw"  ((ISA rv64) (RVEXT RV64C) rv64c-machs)
  #b100111 #b01
  (set c-reg97 (add SI c-reg97 c-reg42)))
(rv-format-cr-4  "c.subw"  ((ISA rv64) (RVEXT RV64C) rv64c-machs)
  #b100111 #b00
  (set c-reg97 (sub SI c-reg97 c-reg42)))
(rv-format-ci-1  "c.addiw" ((ISA rv64) (RVEXT RV64C) rv64c-machs)
  #b001 #b01
  (set c-reg117-ne0 (add SI c-reg117-ne0 imm6-121-65-abs)))
(rv-format-ci-6  "c.ldsp"  ((ISA rv64) (RVEXT RV64C) rv64c-machs)
  #b011 #b10
  (set c-reg117-ne0 (mem DI (add (reg h-gpr 2) uimm9-43-121-62-000-abs))))
(rv-format-css-2 "c.sdsp"  ((ISA rv64) (RVEXT RV64C) rv64c-machs)
  #b111 #b10
  (set (mem UDI (add (reg h-gpr 2) uimm9-93-123-000-abs)) c-reg62))
(rv-format-cl-2  "c.ld"    ((ISA rv64) (RVEXT RV64C) rv64c-machs)
  #b011 #b00
  (set c-reg42 (mem DI (add c-reg97 uimm8-62-123-000-abs))))
(rv-format-cs-2  "c.sd"    ((ISA rv64) (RVEXT RV64C) rv64c-machs)
  #b111 #b00
  (set (mem UDI (add c-reg97 uimm8-62-123-000-abs)) c-reg42))

;RV32FC
; This should maybe be moved to a separate rv32fc isa
(rv-format-ci-7   "c.flwsp" ((ISA rv32) (RVEXT RV32C) rv32c-machs)
  #b011 #b10
  (nop))
(rv-format-css-3  "c.fswsp" ((ISA rv32) (RVEXT RV32C) rv32c-machs)
  #b111 #b10
  (nop))
(rv-format-cs-3   "c.fsw"   ((ISA rv32) (RVEXT RV32C) rv32c-machs)
  #b111 #b00
  (nop))
(rv-format-cl-3   "c.flw"   ((ISA rv32) (RVEXT RV32C) rv32c-machs)
  #b011 #b00
  (nop))

;RV32DC/RV64DC
; These should maybe be moved to a separate rv32/64dc isa
(rv-format-ci-8   "c.fldsp" ((ISA rv64) (RVEXT RV64C) rv64c-machs)
  #b001 #b10
  (nop))
(rv-format-css-4  "c.fsdsp" ((ISA rv64) (RVEXT RV64C) rv64c-machs)
  #b101 #b10
  (nop))
(rv-format-cs-4   "c.fsd"   ((ISA rv64) (RVEXT RV64C) rv64c-machs)
  #b101 #b00
  (nop))
(rv-format-cl-4   "c.fld"   ((ISA rv64) (RVEXT RV64C) rv64c-machs)
  #b001 #b00
  (nop))

;===------------------------- 'I' Base instructions -------------------------===

(rv-format-u       "lui"     (all-isas i-ext all-machs)
  #b0110111
  (set rd (ext (trunc SI uimm32-3120-000000000000))))
(rv-format-u       "auipc"   (all-isas i-ext all-machs)
  #b0010111
  (set rd (add pc (ext (trunc SI uimm32-3120-000000000000)))))
(rv-format-j       "jal"     (all-isas i-ext all-machs)
  #b1101111
  (sequence ()
    (set rd (add pc 4))
    (set pc (add pc (sra (sll DI jmp21 43) 43)))))
(rv-format-i-1     "jalr"    (all-isas i-ext all-machs)
  #b000 #b1100111
  (sequence ((WI src-reg))
    (set src-reg rs1)
    (set rd (add pc 4))
    (set pc (add src-reg imm-lo12))))

; Branches
;; Another macro just so we don't to keep rewriting the semantic part
(define-pmacro (rv-branch mnemonic attr funct3 opcode cc)
  (rv-format-b mnemonic attr funct3 opcode
    (if (cc rs1 rs2) (set pc (add pc (sra (sll DI branch13 51) 51))))))

(rv-branch "beq"  (all-isas i-ext all-machs) #b000 #b1100011 eq)
(rv-branch "bne"  (all-isas i-ext all-machs) #b001 #b1100011 ne)
(rv-branch "blt"  (all-isas i-ext all-machs) #b100 #b1100011 lt)
(rv-branch "bge"  (all-isas i-ext all-machs) #b101 #b1100011 ge)
(rv-branch "bltu" (all-isas i-ext all-machs) #b110 #b1100011 ltu)
(rv-branch "bgeu" (all-isas i-ext all-machs) #b111 #b1100011 geu)

; Loads/Stores
(rv-format-i-2 "lb"  (all-isas i-ext all-machs)
  #b000 #b0000011
  (set rd (mem QI (add rs1 imm-lo12))))
(rv-format-i-2 "lh"  (all-isas i-ext all-machs)
  #b001 #b0000011
  (set rd (mem HI (add rs1 imm-lo12))))
(rv-format-i-2 "lw"  (all-isas i-ext all-machs)
  #b010 #b0000011
  (set rd (mem SI (add rs1 imm-lo12))))
(rv-format-i-2 "lbu" (all-isas i-ext all-machs)
  #b100 #b0000011
  (set rd (mem UQI (add rs1 imm-lo12))))
(rv-format-i-2 "lhu" (all-isas i-ext all-machs)
  #b101 #b0000011
  (set rd (mem UHI (add rs1 imm-lo12))))
(rv-format-s   "sb"  (all-isas i-ext all-machs)
  #b000 #b0100011
  (set (mem UQI (add rs1 store12)) rs2))
(rv-format-s   "sh"  (all-isas i-ext all-machs)
  #b001 #b0100011
  (set (mem UHI (add rs1 store12)) rs2))
(rv-format-s   "sw"  (all-isas i-ext all-machs)
  #b010 #b0100011
  (set (mem USI (add rs1 store12)) rs2))

; Arithmetic
(rv-format-i-1 "addi"  (all-isas i-ext all-machs)
  #b000 #b0010011
  (set rd (add rs1 imm-lo12)))
(rv-format-i-1 "slti"  (all-isas i-ext all-machs)
  #b010 #b0010011
  (set rd (lt  rs1 imm-lo12)))
(rv-format-i-1 "sltiu" (all-isas i-ext all-machs)
  #b011 #b0010011
  (set rd (ltu rs1 imm-lo12)))
(rv-format-i-1 "xori"  (all-isas i-ext all-machs)
  #b100 #b0010011
  (set rd (xor rs1 imm-lo12)))
(rv-format-i-1 "ori"   (all-isas i-ext all-machs)
  #b110 #b0010011
  (set rd (or  rs1 imm-lo12)))
(rv-format-i-1 "andi"  (all-isas i-ext all-machs)
  #b111 #b0010011
  (set rd (and rs1 imm-lo12)))
(rv-format-shift5 "slli" (all-isas i-ext all-machs)
  #b0000000 #b001 #b0010011
  (set rd (sll rs1 uimm5-245)))
(rv-format-shift5 "srli" (all-isas i-ext all-machs)
  #b0000000 #b101 #b0010011
  (set rd (srl rs1 uimm5-245)))
(rv-format-shift5 "srai" (all-isas i-ext all-machs)
  #b0100000 #b101 #b0010011
  (set rd (sra rs1 uimm5-245)))

(dni add "add" (all-isas i-ext all-machs)
  "add ${rd},${rs1},${rs2},${tprel_add}"
  (+ (f-funct7 #b0000000) rs2 rs1 (f-funct3 #b000) rd (f-opcode #b0110011))
  (set rd (add rs1 rs2))
  ())
(rv-format-r "sub"  (all-isas i-ext all-machs)
  #b0100000 #b000 #b0110011
  (set rd (sub rs1 rs2)))
(rv-format-r "sll"  (all-isas i-ext all-machs)
  #b0000000 #b001 #b0110011
  (set rd (sll rs1 rs2)))
(rv-format-r "slt"  (all-isas i-ext all-machs)
  #b0000000 #b010 #b0110011
  (set rd (lt  rs1 rs2)))
(rv-format-r "sltu" (all-isas i-ext all-machs)
  #b0000000 #b011 #b0110011
  (set rd (ltu rs1 rs2)))
(rv-format-r "xor"  (all-isas i-ext all-machs)
  #b0000000 #b100 #b0110011
  (set rd (xor rs1 rs2)))
(rv-format-r "srl"  (all-isas i-ext all-machs)
  #b0000000 #b101 #b0110011
  (set rd (srl rs1 rs2)))
(rv-format-r "sra"  (all-isas i-ext all-machs)
  #b0100000 #b101 #b0110011
  (set rd (sra rs1 rs2)))
(rv-format-r "or"   (all-isas i-ext all-machs)
  #b0000000 #b110 #b0110011
  (set rd (or rs1 rs2)))
(rv-format-r "and"  (all-isas i-ext all-machs)
  #b0000000 #b111 #b0110011
  (set rd (and rs1 rs2)))

; Misc
(dni fence "fence" (all-isas i-ext all-machs)
  "fence ${succ},${pred}"
  (+ (f-uimm4-314 #b0000) pred succ (f-uimm20-1920 #b00000000000000001111))
  (nop) ())
(dni sfence.vm "sfence.vm"   (all-isas i-ext all-machs)
  "s.fence.vm ${rs1}"
  (+ (f-uimm12-3112 #b000100000100) rs1 (f-uimm15-1415 #b000000001110011))
  (nop) ())
(dni sfence.vma "sfence.vma" (all-isas i-ext all-machs)
  "sfence.vma ${rs1},${rs2}"
  (+ (f-uimm7-317 #b0001001) rs1 rs2 (f-uimm15-1415 #b000000001110011))
  (nop) ())

(rv-format-raw     "fence.i" (all-isas i-ext all-machs)
  #b00000000000000000001000000001111
  (nop))
(rv-format-raw     "ecall"   (all-isas i-ext all-machs)
  #b00000000000000000000000001110011
  (nop))
(rv-format-raw     "ebreak"  (all-isas i-ext all-machs)
  #b00000000000100000000000001110011
  ; Do exception entry handling in C function
  (raise-exception EXCEPT-EBREAK))

(rv-format-csr-reg "csrrw"   (all-isas i-ext all-machs)
  #b001 #b1110011
  (nop))
(rv-format-csr-reg "csrrs"   (all-isas i-ext all-machs)
  #b010 #b1110011
  (nop))
(rv-format-csr-reg "csrrc"   (all-isas i-ext all-machs)
  #b011 #b1110011
  (nop))
(rv-format-csr-imm "csrrwi"  (all-isas i-ext all-machs)
  #b101 #b1110011
  (nop))
(rv-format-csr-imm "csrrsi"  (all-isas i-ext all-machs)
  #b110 #b1110011
  (nop))
(rv-format-csr-imm "csrrci"  (all-isas i-ext all-machs)
  #b111 #b1110011
  (nop))
(rv-format-raw     "uret"    (all-isas i-ext all-machs)
  #b00000000001000000000000001110011
  (nop))
(rv-format-raw     "sret"    (all-isas i-ext all-machs)
  #b00010000001000000000000001110011
  (nop))
(rv-format-raw     "hret"    (all-isas i-ext all-machs)
  #b00100000001000000000000001110011
  (nop))
(rv-format-raw     "mret"    (all-isas i-ext all-machs)
  #b00110000001000000000000001110011
  (nop))
(rv-format-raw     "dret"    (all-isas i-ext all-machs)
  #b01111011001000000000000001110011
  (nop))
(rv-format-raw     "wfi"     (all-isas i-ext all-machs)
  #b00010000010100000000000001110011
  (nop))

; RV64I
; Loads and stores
(rv-format-i-2     "lwu"   ((ISA rv64) (RVEXT RV64I) rv64-machs)
		   #b110 #b0000011
		   (set rd (mem USI (add rs1 imm-lo12))))
(rv-format-i-2     "ld"    ((ISA rv64) (RVEXT RV64I) rv64-machs)
		   #b011 #b0000011
		   (set rd (mem UDI (add rs1 imm-lo12))))
(rv-format-s       "sd"    ((ISA rv64) (RVEXT RV64I) rv64-machs)
		   #b011 #b0100011
		   (set (mem UDI (add rs1 store12)) rs2))
(rv-format-shift6  "slli"  ((ISA rv64) (RVEXT RV64I) rv64-machs)
		   #b000000 #b001 #b0010011
		   (set rd (sll rs1 uimm6-256)))
(rv-format-shift6  "srli"  ((ISA rv64) (RVEXT RV64I) rv64-machs)
		   #b000000 #b101 #b0010011
		   (set rd (srl rs1 uimm6-256)))
(rv-format-shift6  "srai"  ((ISA rv64) (RVEXT RV64I) rv64-machs)
		   #b010000 #b101 #b0010011
		   (set rd (sra rs1 uimm6-256)))
(rv-format-i-1     "addiw" ((ISA rv64) (RVEXT RV64I) rv64-machs)
		   #b000 #b0011011
		   (set rd (ext (add SI rs1 imm-lo12))))
(rv-format-shift5  "slliw" ((ISA rv64) (RVEXT RV64I) rv64-machs)
		   #b0000000 #b001 #b0011011
		   (set rd (ext (sll SI rs1 uimm5-245))))
(rv-format-shift5  "srliw" ((ISA rv64) (RVEXT RV64I) rv64-machs)
		   #b0000000 #b101 #b0011011
		   (set rd (ext (srl SI rs1 uimm5-245))))
(rv-format-shift5  "sraiw" ((ISA rv64) (RVEXT RV64I) rv64-machs)
		   #b0100000 #b101 #b0011011
		   (set rd (ext (sra SI rs1 uimm5-245))))
(rv-format-r       "addw"  ((ISA rv64) (RVEXT RV64I) rv64-machs)
		   #b0000000 #b000 #b0111011
		   (set rd (ext (add SI rs1 rs2))))
(rv-format-r       "subw"  ((ISA rv64) (RVEXT RV64I) rv64-machs)
		   #b0100000 #b000 #b0111011
		   (set rd (ext (sub SI rs1 rs2))))
(rv-format-r       "sllw"  ((ISA rv64) (RVEXT RV64I) rv64-machs)
		   #b0000000 #b001 #b0111011
		   (set rd (ext (sll SI rs1 rs2))))
(rv-format-r       "srlw"  ((ISA rv64) (RVEXT RV64I) rv64-machs)
		   #b0000000 #b101 #b0111011
		   (set rd (ext (srl SI rs1 rs2))))
(rv-format-r       "sraw"  ((ISA rv64) (RVEXT RV64I) rv64-machs)
		   #b0100000 #b101 #b0111011
		   (set rd (ext (sra SI rs1 rs2))))

;===-------------------- 'M' extension instructions -------------------------===

; Multiplication instructions
(rv-format-multi "mul"    (all-isas m-ext m-machs) #b0000001 #b000 #b0110011 (set rd (mul rs1 rs2)))
(rv-format-multi "mulh"   (all-isas m-ext m-machs) #b0000001 #b001 #b0110011
  (if (eq (reg h-xlen) 32)
    (set rd (srl (mul DI rs1 rs2) 32))
    (sequence ((DI rs1-lo) (DI rs1-hi) (DI rs2-lo) (DI rs2-hi)
               (DI lo) (DI mid1) (DI mid2) (DI hi)
               (DI res-lo) (DI res-hi) (DI tmp))
      (set rs1-lo (and DI rs1 #xffffffff))
      (set rs1-hi (srl DI rs1 32))
      (set rs2-lo (and DI rs2 #xffffffff))
      (set rs2-hi (srl DI rs2 32))

      ; calculate all of the parts of the result to be added together
      (set lo   (mul rs1-lo rs2-lo))
      (set mid1 (mul rs1-lo rs2-hi))
      (set mid2 (mul rs1-hi rs2-lo))
      (set hi   (mul rs1-hi rs2-hi))

      ; accumulate each 32-bits of the result in turn, first into res-lo,
      ; then into res-hi
      (set res-lo (and lo #xffffffff))
      (set tmp    (add (add (srl lo 32) (and mid1 #xffffffff)) (and mid2 #xffffffff)))
      (set res-lo (add res-lo (sll tmp 32)))
      (set tmp    (add (add (srl tmp 32) (srl mid1 32)) (add (srl mid2 32) (and hi #xffffffff))))
      (set res-hi (and tmp #xffffffff))
      (set tmp    (add (srl tmp 32) (srl hi 32)))
      (set res-hi (add res-hi (sll tmp 32)))

      ; calculate the remainder of the high part of the result
      (set res-hi (add res-hi (mul (sra DI rs1 63) rs2)))
      (set res-hi (add res-hi (mul rs1 (sra DI rs2 63))))

      (set rd res-hi)
    )
  )
)
(rv-format-multi "mulhsu" (all-isas m-ext m-machs) #b0000001 #b010 #b0110011
  (if (eq (reg h-xlen) 32)
    (set rd (srl (mul DI rs1 (zext (trunc SI rs2))) 32))
	  (sequence ((DI rs1-lo) (DI rs1-hi) (DI rs2-lo) (DI rs2-hi)
               (DI lo) (DI mid1) (DI mid2) (DI hi)
               (DI res-lo) (DI res-hi) (DI tmp))
      (set rs1-lo (and DI rs1 #xffffffff))
      (set rs1-hi (srl DI rs1 32))
      (set rs2-lo (and DI rs2 #xffffffff))
      (set rs2-hi (srl DI rs2 32))

      ; calculate all of the parts of the result to be added together
      (set lo     (mul rs1-lo rs2-lo))
      (set mid1   (mul rs1-lo rs2-hi))
      (set mid2   (mul rs1-hi rs2-lo))
      (set hi     (mul rs1-hi rs2-hi))

      ; accumulate each 32-bits of the result in turn, first into res-lo,
      ; then into res-hi
      (set res-lo (and lo #xffffffff))
      (set tmp    (add (add (srl lo 32) (and mid1 #xffffffff)) (and mid2 #xffffffff)))
      (set res-lo (add res-lo (sll tmp 32)))
      (set tmp    (add (add (srl tmp 32) (srl mid1 32)) (add (srl mid2 32) (and hi #xffffffff))))
      (set res-hi (and tmp #xffffffff))
      (set tmp    (add (srl tmp 32) (srl hi 32)))
      (set res-hi (add res-hi (sll tmp 32)))

      ; calculate the remainder of the high part of the result
      (set res-hi (add res-hi (mul (sra DI rs1 63) rs2)))

      (set rd res-hi)
    )
  )
)
(rv-format-multi "mulhu"  (all-isas m-ext m-machs) #b0000001 #b011 #b0110011
  (if (eq (reg h-xlen) 32)
    (set rd (srl (mul DI (zext (trunc SI rs1)) (zext (trunc SI rs2))) 32))
    (sequence ((DI rs1-lo) (DI rs1-hi) (DI rs2-lo) (DI rs2-hi)
               (DI lo) (DI mid1) (DI mid2) (DI hi)
               (DI res-lo) (DI res-hi) (DI tmp))
      (set rs1-lo (and DI rs1 #xffffffff))
      (set rs1-hi (srl DI rs1 32))
      (set rs2-lo (and DI rs2 #xffffffff))
      (set rs2-hi (srl DI rs2 32))

      ; calculate all of the parts of the result to be added together
      (set lo     (mul rs1-lo rs2-lo))
      (set mid1   (mul rs1-lo rs2-hi))
      (set mid2   (mul rs1-hi rs2-lo))
      (set hi     (mul rs1-hi rs2-hi))

      ; accumulate each 32-bits of the result in turn, first into res-lo,
      ; then into res-hi
      (set res-lo (and lo #xffffffff))
      (set tmp    (add (add (srl lo 32) (and mid1 #xffffffff)) (and mid2 #xffffffff)))
      (set res-lo (add res-lo (sll tmp 32)))
      (set tmp    (add (add (srl tmp 32) (srl mid1 32)) (add (srl mid2 32) (and hi #xffffffff))))
      (set res-hi (and tmp #xffffffff))
      (set tmp    (add (srl tmp 32) (srl hi 32)))
      (set res-hi (add res-hi (sll tmp 32)))

      (set rd res-hi)
    )
  )
)
(rv-format-multi "div"    (all-isas m-ext m-machs)
		 #b0000001 #b100 #b0110011
		 (set rd (div  rs1 rs2)))
(rv-format-multi "divu"   (all-isas m-ext m-machs)
		 #b0000001 #b101 #b0110011
		 (set rd (udiv rs1 rs2)))
(rv-format-multi "rem"    (all-isas m-ext m-machs)
		 #b0000001 #b110 #b0110011
		 (set rd (mod  rs1 rs2)))
(rv-format-multi "remu"   (all-isas m-ext m-machs)
		 #b0000001 #b111 #b0110011
		 (set rd (umod rs1 rs2)))

;RV64M
(rv-format-multi "mulw"   ((ISA rv64) (RVEXT RV64M) rv64m-machs)
		 #b0000001 #b000 #b0111011
		 (set rd (mul  SI rs1 rs2)))
(rv-format-multi "divw"   ((ISA rv64) (RVEXT RV64M) rv64m-machs)
		 #b0000001 #b100 #b0111011
		 (set rd (div  SI rs1 rs2)))
(rv-format-multi "divuw"  ((ISA rv64) (RVEXT RV64M) rv64m-machs)
		 #b0000001 #b101 #b0111011
		 (set rd (udiv SI rs1 rs2)))
(rv-format-multi "remw"   ((ISA rv64) (RVEXT RV64M) rv64m-machs)
		 #b0000001 #b110 #b0111011
		 (set rd (mod  SI rs1 rs2)))
(rv-format-multi "remuw"  ((ISA rv64) (RVEXT RV64M) rv64m-machs)
		 #b0000001 #b111 #b0111011
		 (set rd (umod SI rs1 rs2)))

;===-------------------- 'A' extension instructions -------------------------===

; The semantics for these instructions are really simple. At the moment we
; only ever have one core and all memory operations are strictly sequential,
; so these instructions map directly to the underlying operations.

(define-pmacro lr.w-sem (set rd (mem USI rs1)))
(rv-format-a-1 "lr.w"           (all-isas a-ext a-machs) #b00010 #b010 #b0 #b0 lr.w-sem)
(rv-format-a-1 "lr.w.aq"        (all-isas a-ext a-machs) #b00010 #b010 #b1 #b0 lr.w-sem)
(rv-format-a-1 "lr.w.rl"        (all-isas a-ext a-machs) #b00010 #b010 #b0 #b1 lr.w-sem)
(rv-format-a-1 "lr.w.aqrl"      (all-isas a-ext a-machs) #b00010 #b010 #b1 #b1 lr.w-sem)

(define-pmacro sc.w-sem (set (mem USI rs1) rs2))
(rv-format-a-2 "sc.w"           (all-isas a-ext a-machs) #b00011 #b010 #b0 #b0 sc.w-sem)
(rv-format-a-2 "sc.w.aq"        (all-isas a-ext a-machs) #b00011 #b010 #b1 #b0 sc.w-sem)
(rv-format-a-2 "sc.w.rl"        (all-isas a-ext a-machs) #b00011 #b010 #b0 #b1 sc.w-sem)
(rv-format-a-2 "sc.w.aqrl"      (all-isas a-ext a-machs) #b00011 #b010 #b1 #b1 sc.w-sem)

(define-pmacro amoswap.w-sem (sequence ((SI tmp))
  (set tmp (mem SI rs1))
  (set (mem USI rs1) rs2)
  (set rd tmp))
)
(rv-format-a-2 "amoswap.w"      (all-isas a-ext a-machs) #b00001 #b010 #b0 #b0 amoswap.w-sem)
(rv-format-a-2 "amoswap.w.aq"   (all-isas a-ext a-machs) #b00001 #b010 #b1 #b0 amoswap.w-sem)
(rv-format-a-2 "amoswap.w.rl"   (all-isas a-ext a-machs) #b00001 #b010 #b0 #b1 amoswap.w-sem)
(rv-format-a-2 "amoswap.w.aqrl" (all-isas a-ext a-machs) #b00001 #b010 #b1 #b1 amoswap.w-sem)

(define-pmacro amoadd.w-sem (sequence ((SI tmp))
  (set tmp (mem SI rs1))
  (set (mem USI rs1) (add tmp rs2))
  (set rd tmp))
)
(rv-format-a-2 "amoadd.w"       (all-isas a-ext a-machs) #b00000 #b010 #b0 #b0 amoadd.w-sem)
(rv-format-a-2 "amoadd.w.aq"    (all-isas a-ext a-machs) #b00000 #b010 #b1 #b0 amoadd.w-sem)
(rv-format-a-2 "amoadd.w.rl"    (all-isas a-ext a-machs) #b00000 #b010 #b0 #b1 amoadd.w-sem)
(rv-format-a-2 "amoadd.w.aqrl"  (all-isas a-ext a-machs) #b00000 #b010 #b1 #b1 amoadd.w-sem)

(define-pmacro amoxor.w-sem (sequence ((SI tmp))
  (set tmp (mem SI rs1))
  (set (mem USI rs1) (xor tmp rs2))
  (set rd tmp))
)
(rv-format-a-2 "amoxor.w"       (all-isas a-ext a-machs) #b00100 #b010 #b0 #b0 amoxor.w-sem)
(rv-format-a-2 "amoxor.w.aq"    (all-isas a-ext a-machs) #b00100 #b010 #b1 #b0 amoxor.w-sem)
(rv-format-a-2 "amoxor.w.rl"    (all-isas a-ext a-machs) #b00100 #b010 #b0 #b1 amoxor.w-sem)
(rv-format-a-2 "amoxor.w.aqrl"  (all-isas a-ext a-machs) #b00100 #b010 #b1 #b1 amoxor.w-sem)

(define-pmacro amoand.w-sem (sequence ((SI tmp))
  (set tmp (mem SI rs1))
  (set (mem USI rs1) (and tmp rs2))
  (set rd tmp))
)
(rv-format-a-2 "amoand.w"       (all-isas a-ext a-machs) #b01100 #b010 #b0 #b0 amoand.w-sem)
(rv-format-a-2 "amoand.w.aq"    (all-isas a-ext a-machs) #b01100 #b010 #b1 #b0 amoand.w-sem)
(rv-format-a-2 "amoand.w.rl"    (all-isas a-ext a-machs) #b01100 #b010 #b0 #b1 amoand.w-sem)
(rv-format-a-2 "amoand.w.aqrl"  (all-isas a-ext a-machs) #b01100 #b010 #b1 #b1 amoand.w-sem)

(define-pmacro amoor.w-sem (sequence ((SI tmp))
  (set tmp (mem SI rs1))
  (set (mem USI rs1) (or tmp rs2))
  (set rd tmp))
)
(rv-format-a-2 "amoor.w"        (all-isas a-ext a-machs) #b01000 #b010 #b0 #b0 amoor.w-sem)
(rv-format-a-2 "amoor.w.aq"     (all-isas a-ext a-machs) #b01000 #b010 #b1 #b0 amoor.w-sem)
(rv-format-a-2 "amoor.w.rl"     (all-isas a-ext a-machs) #b01000 #b010 #b0 #b1 amoor.w-sem)
(rv-format-a-2 "amoor.w.aqrl"   (all-isas a-ext a-machs) #b01000 #b010 #b1 #b1 amoor.w-sem)

(define-pmacro amomin.w-sem (sequence ((SI tmp))
  (set tmp (mem SI rs1))
  (if (lt tmp rs2) (set (mem USI rs1) tmp) (set (mem USI rs1) rs2))
  (set rd tmp))
)
(rv-format-a-2 "amomin.w"       (all-isas a-ext a-machs) #b10000 #b010 #b0 #b0 amomin.w-sem)
(rv-format-a-2 "amomin.w.aq"    (all-isas a-ext a-machs) #b10000 #b010 #b1 #b0 amomin.w-sem)
(rv-format-a-2 "amomin.w.rl"    (all-isas a-ext a-machs) #b10000 #b010 #b0 #b1 amomin.w-sem)
(rv-format-a-2 "amomin.w.aqrl"  (all-isas a-ext a-machs) #b10000 #b010 #b1 #b1 amomin.w-sem)

(define-pmacro amomax.w-sem (sequence ((SI tmp))
  (set tmp (mem SI rs1))
  (if (lt tmp rs2) (set (mem USI rs1) rs2) (set (mem USI rs1) tmp))
  (set rd tmp))
)
(rv-format-a-2 "amomax.w"       (all-isas a-ext a-machs) #b10100 #b010 #b0 #b0 amomax.w-sem)
(rv-format-a-2 "amomax.w.aq"    (all-isas a-ext a-machs) #b10100 #b010 #b1 #b0 amomax.w-sem)
(rv-format-a-2 "amomax.w.rl"    (all-isas a-ext a-machs) #b10100 #b010 #b0 #b1 amomax.w-sem)
(rv-format-a-2 "amomax.w.aqrl"  (all-isas a-ext a-machs) #b10100 #b010 #b1 #b1 amomax.w-sem)

(define-pmacro amominu.w-sem (sequence ((SI tmp))
  (set tmp (mem SI rs1))
  (if (ltu tmp rs2) (set (mem USI rs1) tmp) (set (mem USI rs1) rs2))
  (set rd tmp))
)
(rv-format-a-2 "amominu.w"      (all-isas a-ext a-machs) #b11000 #b010 #b0 #b0 amominu.w-sem)
(rv-format-a-2 "amominu.w.aq"   (all-isas a-ext a-machs) #b11000 #b010 #b1 #b0 amominu.w-sem)
(rv-format-a-2 "amominu.w.rl"   (all-isas a-ext a-machs) #b11000 #b010 #b0 #b1 amominu.w-sem)
(rv-format-a-2 "amominu.w.aqrl" (all-isas a-ext a-machs) #b11000 #b010 #b1 #b1 amominu.w-sem)

(define-pmacro amomaxu.w-sem (sequence ((SI tmp))
  (set tmp (mem SI rs1))
  (if (ltu tmp rs2) (set (mem USI rs1) rs2) (set (mem USI rs1) tmp))
  (set rd tmp))
)
(rv-format-a-2 "amomaxu.w"      (all-isas a-ext a-machs) #b11100 #b010 #b0 #b0 amomaxu.w-sem)
(rv-format-a-2 "amomaxu.w.aq"   (all-isas a-ext a-machs) #b11100 #b010 #b1 #b0 amomaxu.w-sem)
(rv-format-a-2 "amomaxu.w.rl"   (all-isas a-ext a-machs) #b11100 #b010 #b0 #b1 amomaxu.w-sem)
(rv-format-a-2 "amomaxu.w.aqrl" (all-isas a-ext a-machs) #b11100 #b010 #b1 #b1 amomaxu.w-sem)

;RV64A
(define-pmacro lr.d-sem (set rd (mem UDI rs1)))
(rv-format-a-1 "lr.d"           ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00010 #b011 #b0 #b0 lr.d-sem)
(rv-format-a-1 "lr.d.aq"        ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00010 #b011 #b1 #b0 lr.d-sem)
(rv-format-a-1 "lr.d.rl"        ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00010 #b011 #b0 #b1 lr.d-sem)
(rv-format-a-1 "lr.d.aqrl"      ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00010 #b011 #b1 #b1 lr.d-sem)

(define-pmacro sc.d-sem (set (mem UDI rs1) rs2))
(rv-format-a-2 "sc.d"           ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00011 #b011 #b0 #b0 sc.d-sem)
(rv-format-a-2 "sc.d.aq"        ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00011 #b011 #b1 #b0 sc.d-sem)
(rv-format-a-2 "sc.d.rl"        ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00011 #b011 #b0 #b1 sc.d-sem)
(rv-format-a-2 "sc.d.aqrl"      ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00011 #b011 #b1 #b1 sc.d-sem)

(define-pmacro amoswap.d-sem (sequence ((DI tmp))
  (set tmp (mem DI rs1))
  (set (mem UDI rs1) rs2)
  (set rd tmp))
)
(rv-format-a-2 "amoswap.d"      ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00001 #b011 #b0 #b0 amoswap.d-sem)
(rv-format-a-2 "amoswap.d.aq"   ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00001 #b011 #b1 #b0 amoswap.d-sem)
(rv-format-a-2 "amoswap.d.rl"   ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00001 #b011 #b0 #b1 amoswap.d-sem)
(rv-format-a-2 "amoswap.d.aqrl" ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00001 #b011 #b1 #b1 amoswap.d-sem)

(define-pmacro amoadd.d-sem (sequence ((DI tmp))
  (set tmp (mem DI rs1))
  (set (mem UDI rs1) (add tmp rs2))
  (set rd tmp))
)
(rv-format-a-2 "amoadd.d"       ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00000 #b011 #b0 #b0 amoadd.d-sem)
(rv-format-a-2 "amoadd.d.aq"    ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00000 #b011 #b1 #b0 amoadd.d-sem)
(rv-format-a-2 "amoadd.d.rl"    ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00000 #b011 #b0 #b1 amoadd.d-sem)
(rv-format-a-2 "amoadd.d.aqrl"  ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00000 #b011 #b1 #b1 amoadd.d-sem)

(define-pmacro amoxor.d-sem (sequence ((DI tmp))
  (set tmp (mem DI rs1))
  (set (mem UDI rs1) (xor tmp rs2))
  (set rd tmp))
)
(rv-format-a-2 "amoxor.d"       ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00100 #b011 #b0 #b0 amoxor.d-sem)
(rv-format-a-2 "amoxor.d.aq"    ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00100 #b011 #b1 #b0 amoxor.d-sem)
(rv-format-a-2 "amoxor.d.rl"    ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00100 #b011 #b0 #b1 amoxor.d-sem)
(rv-format-a-2 "amoxor.d.aqrl"  ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b00100 #b011 #b1 #b1 amoxor.d-sem)

(define-pmacro amoand.d-sem (sequence ((DI tmp))
  (set tmp (mem DI rs1))
  (set (mem UDI rs1) (and tmp rs2))
  (set rd tmp))
)
(rv-format-a-2 "amoand.d"       ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b01100 #b011 #b0 #b0 amoadd.d-sem)
(rv-format-a-2 "amoand.d.aq"    ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b01100 #b011 #b1 #b0 amoadd.d-sem)
(rv-format-a-2 "amoand.d.rl"    ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b01100 #b011 #b0 #b1 amoadd.d-sem)
(rv-format-a-2 "amoand.d.aqrl"  ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b01100 #b011 #b1 #b1 amoadd.d-sem)

(define-pmacro amoor.d-sem (sequence ((DI tmp))
  (set tmp (mem DI rs1))
  (set (mem UDI rs1) (or tmp rs2))
  (set rd tmp))
)
(rv-format-a-2 "amoor.d"        ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b01000 #b011 #b0 #b0 amoor.d-sem)
(rv-format-a-2 "amoor.d.aq"     ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b01000 #b011 #b1 #b0 amoor.d-sem)
(rv-format-a-2 "amoor.d.rl"     ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b01000 #b011 #b0 #b1 amoor.d-sem)
(rv-format-a-2 "amoor.d.aqrl"   ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b01000 #b011 #b1 #b1 amoor.d-sem)

(define-pmacro amomin.d-sem (sequence ((DI tmp))
  (set tmp (mem DI rs1))
  (if (lt tmp rs2) (set (mem UDI rs1) tmp) (set (mem UDI rs1) rs2))
  (set rd tmp))
)
(rv-format-a-2 "amomin.d"       ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b10000 #b011 #b0 #b0 amomin.d-sem)
(rv-format-a-2 "amomin.d.aq"    ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b10000 #b011 #b1 #b0 amomin.d-sem)
(rv-format-a-2 "amomin.d.rl"    ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b10000 #b011 #b0 #b1 amomin.d-sem)
(rv-format-a-2 "amomin.d.aqrl"  ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b10000 #b011 #b1 #b1 amomin.d-sem)

(define-pmacro amomax.d-sem (sequence ((DI tmp))
  (set tmp (mem DI rs1))
  (if (lt tmp rs2) (set (mem UDI rs1) rs2) (set (mem UDI rs1) tmp))
  (set rd tmp))
)
(rv-format-a-2 "amomax.d"       ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b10100 #b011 #b0 #b0 amomax.d-sem)
(rv-format-a-2 "amomax.d.aq"    ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b10100 #b011 #b1 #b0 amomax.d-sem)
(rv-format-a-2 "amomax.d.rl"    ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b10100 #b011 #b0 #b1 amomax.d-sem)
(rv-format-a-2 "amomax.d.aqrl"  ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b10100 #b011 #b1 #b1 amomax.d-sem)

(define-pmacro amominu.d-sem (sequence ((DI tmp))
  (set tmp (mem DI rs1))
  (if (ltu tmp rs2) (set (mem UDI rs1) tmp) (set (mem UDI rs1) rs2))
  (set rd tmp))
)
(rv-format-a-2 "amominu.d"      ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b11000 #b011 #b0 #b0 amominu.d-sem)
(rv-format-a-2 "amominu.d.aq"   ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b11000 #b011 #b1 #b0 amominu.d-sem)
(rv-format-a-2 "amominu.d.rl"   ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b11000 #b011 #b0 #b1 amominu.d-sem)
(rv-format-a-2 "amominu.d.aqrl" ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b11000 #b011 #b1 #b1 amominu.d-sem)

(define-pmacro amomaxu.d-sem (sequence ((DI tmp))
  (set tmp (mem DI rs1))
  (if (ltu tmp rs2) (set (mem UDI rs1) rs2) (set (mem UDI rs1) tmp))
  (set rd tmp))
)
(rv-format-a-2 "amomaxu.d"      ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b11100 #b011 #b0 #b0 amomaxu.d-sem)
(rv-format-a-2 "amomaxu.d.aq"   ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b11100 #b011 #b1 #b0 amomaxu.d-sem)
(rv-format-a-2 "amomaxu.d.rl"   ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b11100 #b011 #b0 #b1 amomaxu.d-sem)
(rv-format-a-2 "amomaxu.d.aqrl" ((ISA rv64) (RVEXT RV64A) rv64a-machs) #b11100 #b011 #b1 #b1 amomaxu.d-sem)

;===-------------------- 'F' extension instructions -------------------------===

(rv-format-f-1    "flw"       (all-isas f-ext f-machs) #b010 #b0000111)
(rv-format-f-2    "fsw"       (all-isas f-ext f-machs) #b010 #b0100111)
(rv-format-f-3-rm "fmadd.s"   (all-isas f-ext f-machs) #b00 #b1000011)
(rv-format-f-3-rm "fmsub.s"   (all-isas f-ext f-machs) #b00 #b1000111)
(rv-format-f-3-rm "fnmsub.s"  (all-isas f-ext f-machs) #b00 #b1001011)
(rv-format-f-3-rm "fnmadd.s"  (all-isas f-ext f-machs) #b00 #b1001111)
(rv-format-f-4-rm "fadd.s"    (all-isas f-ext f-machs) #b0000000 #b1010011)
(rv-format-f-4-rm "fsub.s"    (all-isas f-ext f-machs) #b0000100 #b1010011)
(rv-format-f-4-rm "fmul.s"    (all-isas f-ext f-machs) #b0001000 #b1010011)
(rv-format-f-4-rm "fdiv.s"    (all-isas f-ext f-machs) #b0001100 #b1010011)
(rv-format-f-4    "fsgnj.s"   (all-isas f-ext f-machs) #b0010000 #b000 #b1010011)
(rv-format-f-4    "fsgnjn.s"  (all-isas f-ext f-machs) #b0010000 #b001 #b1010011)
(rv-format-f-4    "fsgnjx.s"  (all-isas f-ext f-machs) #b0010000 #b010 #b1010011)
(rv-format-f-4    "fmin.s"    (all-isas f-ext f-machs) #b0010100 #b000 #b1010011)
(rv-format-f-4    "fmax.s"    (all-isas f-ext f-machs) #b0010100 #b001 #b1010011)
(rv-format-f-8    "feq.s"     (all-isas f-ext f-machs) #b1010000 #b010 #b1010011)
(rv-format-f-8    "flt.s"     (all-isas f-ext f-machs) #b1010000 #b001 #b1010011)
(rv-format-f-8    "fle.s"     (all-isas f-ext f-machs) #b1010000 #b000 #b1010011)
(rv-format-f-5-rm "fsqrt.s"   (all-isas f-ext f-machs) #b0101100 #b00000 #b1010011)
(rv-format-f-7-rm "fcvt.w.s"  (all-isas f-ext f-machs) #b1100000 #b00000 #b1010011)
(rv-format-f-7-rm "fcvt.wu.s" (all-isas f-ext f-machs) #b1100000 #b00001 #b1010011)
(rv-format-f-7    "fmv.x.w"   (all-isas f-ext f-machs) #b1110000 #b00000 #b000 #b1010011)
(rv-format-f-7    "fclass.s"  (all-isas f-ext f-machs) #b1110000 #b00000 #b001 #b1010011)
(rv-format-f-6-rm "fcvt.s.w"  (all-isas f-ext f-machs) #b1101000 #b00000 #b1010011)
(rv-format-f-6-rm "fcvt.s.wu" (all-isas f-ext f-machs) #b1101000 #b00001 #b1010011)
(rv-format-f-6    "fmv.w.x"   (all-isas f-ext f-machs) #b1111000 #b00000 #b000 #b1010011)

;RV64F
(rv-format-f-7-rm "fcvt.l.s"  ((ISA rv64) (RVEXT RV64F) rv64f-machs) #b1100000 #b00010 #b1010011)
(rv-format-f-7-rm "fcvt.lu.s" ((ISA rv64) (RVEXT RV64F) rv64f-machs) #b1100000 #b00011 #b1010011)
(rv-format-f-6-rm "fcvt.s.l"  ((ISA rv64) (RVEXT RV64F) rv64f-machs) #b1101000 #b00010 #b1010011)
(rv-format-f-6-rm "fcvt.s.lu" ((ISA rv64) (RVEXT RV64F) rv64f-machs) #b1101000 #b00011 #b1010011)

;===-------------------- 'D' extension instructions -------------------------===

(rv-format-f-1    "fld"       (all-isas d-ext d-machs) #b011 #b0000111)
(rv-format-f-2    "fsd"       (all-isas d-ext d-machs) #b011 #b0100111)
(rv-format-f-3-rm "fmadd.d"   (all-isas d-ext d-machs) #b01 #b1000011)
(rv-format-f-3-rm "fmsub.d"   (all-isas d-ext d-machs) #b01 #b1000111)
(rv-format-f-3-rm "fnmsub.d"  (all-isas d-ext d-machs) #b01 #b1001011)
(rv-format-f-3-rm "fnmadd.d"  (all-isas d-ext d-machs) #b01 #b1001111)
(rv-format-f-4-rm "fadd.d"    (all-isas d-ext d-machs) #b0000001 #b1010011)
(rv-format-f-4-rm "fsub.d"    (all-isas d-ext d-machs) #b0000101 #b1010011)
(rv-format-f-4-rm "fmul.d"    (all-isas d-ext d-machs) #b0001001 #b1010011)
(rv-format-f-4-rm "fdiv.d"    (all-isas d-ext d-machs) #b0001101 #b1010011)
(rv-format-f-4    "fsgnj.d"   (all-isas d-ext d-machs) #b0010001 #b000 #b1010011)
(rv-format-f-4    "fsgnjn.d"  (all-isas d-ext d-machs) #b0010001 #b001 #b1010011)
(rv-format-f-4    "fsgnjx.d"  (all-isas d-ext d-machs) #b0010001 #b010 #b1010011)
(rv-format-f-4    "fmin.d"    (all-isas d-ext d-machs) #b0010101 #b000 #b1010011)
(rv-format-f-4    "fmax.d"    (all-isas d-ext d-machs) #b0010101 #b001 #b1010011)
(rv-format-f-8    "feq.d"     (all-isas d-ext d-machs) #b1010001 #b010 #b1010011)
(rv-format-f-8    "flt.d"     (all-isas d-ext d-machs) #b1010001 #b001 #b1010011)
(rv-format-f-8    "fle.d"     (all-isas d-ext d-machs) #b1010001 #b000 #b1010011)
(rv-format-f-5-rm "fsqrt.d"   (all-isas d-ext d-machs) #b0101101 #b00000 #b1010011)
(rv-format-f-7-rm "fcvt.w.d"  (all-isas d-ext d-machs) #b1100001 #b00000 #b1010011)
(rv-format-f-7-rm "fcvt.wu.d" (all-isas d-ext d-machs) #b1100001 #b00001 #b1010011)
(rv-format-f-7    "fclass.d"  (all-isas d-ext d-machs) #b1110001 #b00000 #b001 #b1010011)
(rv-format-f-6    "fcvt.d.w"  (all-isas d-ext d-machs) #b1101001 #b00000 #b000 #b1010011)
(rv-format-f-6    "fcvt.d.wu" (all-isas d-ext d-machs) #b1101001 #b00001 #b000 #b1010011)
(rv-format-f-5-rm "fcvt.s.d"  (all-isas d-ext d-machs) #b0100000 #b00001 #b1010011)
(rv-format-f-5    "fcvt.d.s"  (all-isas d-ext d-machs) #b0100001 #b00000 #b000 #b1010011)

;RV64D
(rv-format-f-7-rm "fcvt.l.d"  ((ISA rv64) (RVEXT RV64D) rv64d-machs) #b1100001 #b00010 #b1010011)
(rv-format-f-7-rm "fcvt.lu.d" ((ISA rv64) (RVEXT RV64D) rv64d-machs) #b1100001 #b00011 #b1010011)
(rv-format-f-7    "fmv.x.d"   ((ISA rv64) (RVEXT RV64D) rv64d-machs) #b1110001 #b00000 #b000 #b1010011)
(rv-format-f-6-rm "fcvt.d.l"  ((ISA rv64) (RVEXT RV64D) rv64d-machs) #b1101001 #b00010 #b1010011)
(rv-format-f-6-rm "fcvt.d.lu" ((ISA rv64) (RVEXT RV64D) rv64d-machs) #b1101001 #b00011 #b1010011)
(rv-format-f-6    "fmv.d.x"   ((ISA rv64) (RVEXT RV64D) rv64d-machs) #b1111001 #b00000 #b000 #b1010011)

;===-------------------- 'Q' extension instructions -------------------------===

(rv-format-f-1    "flq"       (all-isas q-ext q-machs) #b100 #b0000111)
(rv-format-f-2    "fsq"       (all-isas q-ext q-machs) #b100 #b0100111)
(rv-format-f-3-rm "fmadd.q"   (all-isas q-ext q-machs) #b11 #b1000011)
(rv-format-f-3-rm "fmsub.q"   (all-isas q-ext q-machs) #b11 #b1000111)
(rv-format-f-3-rm "fnmsub.q"  (all-isas q-ext q-machs) #b11 #b1001011)
(rv-format-f-3-rm "fnmadd.q"  (all-isas q-ext q-machs) #b11 #b1001111)
(rv-format-f-4-rm "fadd.q"    (all-isas q-ext q-machs) #b0000011 #b1010011)
(rv-format-f-4-rm "fsub.q"    (all-isas q-ext q-machs) #b0000111 #b1010011)
(rv-format-f-4-rm "fmul.q"    (all-isas q-ext q-machs) #b0001011 #b1010011)
(rv-format-f-4-rm "fdiv.q"    (all-isas q-ext q-machs) #b0001111 #b1010011)
(rv-format-f-4    "fsgnj.q"   (all-isas q-ext q-machs) #b0010011 #b000 #b1010011)
(rv-format-f-4    "fsgnjn.q"  (all-isas q-ext q-machs) #b0010011 #b001 #b1010011)
(rv-format-f-4    "fsgnjx.q"  (all-isas q-ext q-machs) #b0010011 #b010 #b1010011)
(rv-format-f-4    "fmin.q"    (all-isas q-ext q-machs) #b0010111 #b000 #b1010011)
(rv-format-f-4    "fmax.q"    (all-isas q-ext q-machs) #b0010111 #b001 #b1010011)
(rv-format-f-8    "feq.q"     (all-isas q-ext q-machs) #b1010011 #b010 #b1010011)
(rv-format-f-8    "flt.q"     (all-isas q-ext q-machs) #b1010011 #b001 #b1010011)
(rv-format-f-8    "fle.q"     (all-isas q-ext q-machs) #b1010011 #b000 #b1010011)
(rv-format-f-5-rm "fsqrt.q"   (all-isas q-ext q-machs) #b0101111 #b00000 #b1010011)
(rv-format-f-7-rm "fcvt.w.q"  (all-isas q-ext q-machs) #b1100011 #b00000 #b1010011)
(rv-format-f-7-rm "fcvt.wu.q" (all-isas q-ext q-machs) #b1100011 #b00001 #b1010011)
(rv-format-f-7    "fclass.q"  (all-isas q-ext q-machs) #b1110011 #b00000 #b001 #b1010011)
(rv-format-f-6    "fcvt.q.w"  (all-isas q-ext q-machs) #b1101011 #b00000 #b000 #b1010011)
(rv-format-f-6    "fcvt.q.wu" (all-isas q-ext q-machs) #b1101011 #b00001 #b000 #b1010011)
(rv-format-f-5-rm "fcvt.s.q"  (all-isas q-ext q-machs) #b0100000 #b00011 #b1010011)
(rv-format-f-5-rm "fcvt.d.q"  (all-isas q-ext q-machs) #b0100001 #b00011 #b1010011)
(rv-format-f-5    "fcvt.q.s"  (all-isas q-ext q-machs) #b0100011 #b00000 #b000 #b1010011)
(rv-format-f-5    "fcvt.q.d"  (all-isas q-ext q-machs) #b0100011 #b00001 #b000 #b1010011)

;RV64Q
(rv-format-f-7-rm "fcvt.l.q"  ((ISA rv64) (RVEXT RV64Q) rv64q-machs) #b1100011 #b00010 #b1010011)
(rv-format-f-7-rm "fcvt.lu.q" ((ISA rv64) (RVEXT RV64Q) rv64q-machs) #b1100011 #b00011 #b1010011)
(rv-format-f-6-rm "fcvt.q.l"  ((ISA rv64) (RVEXT RV64Q) rv64q-machs) #b1101011 #b00010 #b1010011)
(rv-format-f-6-rm "fcvt.q.lu" ((ISA rv64) (RVEXT RV64Q) rv64q-machs) #b1101011 #b00011 #b1010011)

;RV128Q (not supported yet)
;(rv-format-f-7    "fmv.x.q"  ((ISA rv128) (RVEXT RV128Q) rv128q-machs) #b1110011 #b00000 #b000 #b1010011)
;(rv-format-f-6    "fmv.q.x"  ((ISA rv128) (RVEXT RV128Q) rv128q-machs) #b1111011 #b00000 #b000 #b1010011)

;===------------------ 'C' extension macro instructions ---------------------===
;
; It is important that the compressed macro instructions are defined *before*
; the normal macro instructions. This is because the priority of
; assembly/disassembly is dependent on the order they are defined, and we want
; to try shorter compressed instructions first.
;
; Also where there are multiple ways to assembler or disassemble an
; instruction, the order in this list determines the priority.
; It would be nice to not rely on this.
;
; Aside from jumps and branches, compressed instructions reject anything
; which isn't an absolute value. This avoids two problems; First, we cannot
; generate locations for symbols in most compressed instructions; and second,
; a number of instructions share the same mnemonic and differ only in the
; type of an operand (immediate vs register operand). If this case, we don't
; want to accidentally parse the register name as a symbol for an immediate
; field.

(define-pmacro (rvc-macro macro-name mnemonic attr-list asm expansion)
  (dnmi macro-name mnemonic attr-list (.str mnemonic asm) expansion)
)

; RVC hints
;
; These are defined first to prevent RVC hints being disassembled to normal
; RVI instructions

(rvc-macro p-c-nop-hint "c.nop"  (all-isas c-ext) " ${nzuimm6-121-65-abs}"
	   (emit c.nop))
(rvc-macro p-c-li-hint  "c.li"   (all-isas c-ext) " ${c-reg117-0},${imm6-121-65-abs}"                  (emit c.li   c-reg117-0 imm6-121-65-abs))
(rvc-macro p-c-lui-hint "c.lui"  (all-isas c-ext) " ${c-reg117-0},${nzuimm18-121-65-000000000000-abs}" (emit c.lui  c-reg117-0 nzuimm18-121-65-000000000000-abs))
(rvc-macro p-c-mv-hint  "c.mv"   (all-isas c-ext) " ${c-reg117-0},${c-reg62-ne0}"                      (emit c.mv   c-reg117-0 c-reg62-ne0))
(rvc-macro p-c-add-hint "c.add"  (all-isas c-ext) " ${c-reg117-0},${c-reg62-ne0}"                      (emit c.add  c-reg117-0 c-reg62-ne0))

(rvc-macro p-c-slli-hint "c.slli" (all-isas c-ext) " ${c-reg117-0},${nzuimm6-121-65-abs}" (emit c.slli c-reg117-0 nzuimm6-121-65-abs))
(rvc-macro p-c-addi-hint "c.addi" (all-isas c-ext NO-DIS) " ${c-tied-regs117},${imm-zero}"                  (emit c.addi (c-reg117 c-tied-regs117) imm6-121-65-abs))

; RVC instructions
(rvc-macro p-c-nop     "nop"    (all-isas c-ext) "" (emit c.nop))
(rvc-macro p-c-ebreak  "ebreak" (all-isas c-ext) "" (emit c.ebreak))
(rvc-macro p-c-unimp   "unimp"  (all-isas c-ext) "" (emit c.unimp))
(rvc-macro p-c-sbreak  "sbreak" (all-isas c-ext) "" (emit c.ebreak))
(rvc-macro p-c-ret     "ret"    (all-isas c-ext) "" (emit c.jr (c-reg117-ne0 1)))
(rvc-macro p-c-jr      "jr"     (all-isas c-ext) " ${c-reg117-ne0}" (emit c.jr   c-reg117-ne0))
(rvc-macro p-c-jalr    "jalr"   (all-isas c-ext) " ${c-reg117-ne0}" (emit c.jalr c-reg117-ne0))
(rvc-macro p-c-j       "j"      (all-isas c-ext RELAXABLE) " ${cjmp12}" (emit c.j    cjmp12))
(rvc-macro p-c-jal     "jal"    ((ISA rv32) (RVEXT RV32C) RELAXABLE) " ${cjmp12}" (emit c.jal  cjmp12))
(rvc-macro p-c-beqz    "beqz"   (all-isas c-ext RELAXABLE) " ${c-reg97},${cbranch9}" (emit c.beqz c-reg97 cbranch9))
(rvc-macro p-c-bnez    "bnez"   (all-isas c-ext RELAXABLE) " ${c-reg97},${cbranch9}" (emit c.bnez c-reg97 cbranch9))
(rvc-macro p-c-lui     "lui"    (all-isas c-ext) " ${c-reg117-ne0-ne2},${nzuimm18-121-65-000000000000-abs}" (emit c.lui c-reg117-ne0-ne2 nzuimm18-121-65-000000000000-abs))
(rvc-macro p-c-li      "li"     (all-isas c-ext) " ${c-reg117-ne0},${imm6-121-65-abs}"                      (emit c.li  c-reg117-ne0     imm6-121-65-abs))
(rvc-macro p-c-mv      "mv"     (all-isas c-ext) " ${c-reg117-ne0},${c-reg62-ne0}"                          (emit c.mv  c-reg117-ne0     c-reg62-ne0))
(rvc-macro p-c-move    "move"   (all-isas c-ext) " ${c-reg117-ne0},${c-reg62-ne0}"                          (emit c.mv  c-reg117-ne0     c-reg62-ne0))
(rvc-macro p-c-andi    "andi"   (all-isas c-ext) " ${c-tied-regs97},${nzimm6-121-65-abs}"                   (emit c.andi (c-reg97 c-tied-regs97) nzimm6-121-65-abs))
(rvc-macro p-c-and-1   "and"    (all-isas c-ext) " ${c-tied-regs97},${nzimm6-121-65-abs}"                   (emit c.andi (c-reg97 c-tied-regs97) nzimm6-121-65-abs))
(rvc-macro p-c-and-2   "and"    (all-isas c-ext) " ${c-tied-regs97-commutative},${c-reg42}"                 (emit c.and  (c-reg97 c-tied-regs97-commutative) c-reg42))
(rvc-macro p-c-addi-1  "addi"   (all-isas c-ext) " ${sp-reg},${sp-reg},${nzimm10-121-42-51-21-61-0000-abs}" (emit c.addi16sp nzimm10-121-42-51-21-61-0000-abs))
(rvc-macro p-c-addi-2  "addi"   (all-isas c-ext) " ${c-tied-regs117},${nzimm6-121-65-abs}"                  (emit c.addi (c-reg117 c-tied-regs117) nzimm6-121-65-abs))
(rvc-macro p-c-addi-3  "addi"   (all-isas c-ext) " ${c-reg42},${sp-reg},${nzuimm10-104-122-51-61-00-abs}"   (emit c.addi4spn c-reg42 nzuimm10-104-122-51-61-00-abs))
(rvc-macro p-c-add-1   "add"    (all-isas c-ext) " ${sp-reg},${sp-reg},${nzimm10-121-42-51-21-61-0000-abs}" (emit c.addi16sp nzimm10-121-42-51-21-61-0000-abs))
(rvc-macro p-c-add-2   "add"    (all-isas c-ext) " ${c-tied-regs117-ne0-commutative},${c-reg62-ne0}"        (emit c.add  (c-reg117-ne0 c-tied-regs117-ne0-commutative) c-reg62-ne0))
(rvc-macro p-c-add-3   "add"    (all-isas c-ext) " ${c-tied-regs117},${nzimm6-121-65-abs}"                  (emit c.addi (c-reg117 c-tied-regs117) nzimm6-121-65-abs))
(rvc-macro p-c-add-4   "add"    (all-isas c-ext) " ${c-reg42},${sp-reg},${nzuimm10-104-122-51-61-00-abs}"   (emit c.addi4spn c-reg42 nzuimm10-104-122-51-61-00-abs))
(rvc-macro p-c-slli    "slli"   (all-isas c-ext) " ${c-tied-regs117-ne0},${nzuimm6-121-65-abs}"             (emit c.slli (c-reg117-ne0 c-tied-regs117-ne0) nzuimm6-121-65-abs))
(rvc-macro p-c-sll     "sll"    (all-isas c-ext) " ${c-tied-regs117-ne0},${nzuimm6-121-65-abs}"             (emit c.slli (c-reg117-ne0 c-tied-regs117-ne0) nzuimm6-121-65-abs))
(rvc-macro p-c-srli    "srli"   (all-isas c-ext) " ${c-tied-regs97},${nzuimm6-121-65-abs}"                  (emit c.srli (c-reg97 c-tied-regs97) nzuimm6-121-65-abs))
(rvc-macro p-c-srl     "srl"    (all-isas c-ext) " ${c-tied-regs97},${nzuimm6-121-65-abs}"                  (emit c.srli (c-reg97 c-tied-regs97) nzuimm6-121-65-abs))
(rvc-macro p-c-srai    "srai"   (all-isas c-ext) " ${c-tied-regs97},${nzuimm6-121-65-abs}"                  (emit c.srai (c-reg97 c-tied-regs97) nzuimm6-121-65-abs))
(rvc-macro p-c-sra     "sra"    (all-isas c-ext) " ${c-tied-regs97},${nzuimm6-121-65-abs}"                  (emit c.srai (c-reg97 c-tied-regs97) nzuimm6-121-65-abs))
(rvc-macro p-c-sub     "sub"    (all-isas c-ext) " ${c-tied-regs97},${c-reg42}"                             (emit c.sub  (c-reg97 c-tied-regs97) c-reg42))
(rvc-macro p-c-lw-1    "lw"     (all-isas c-ext) " ${c-reg42},${uimm7-51-123-61-00-abs}(${c-reg97})"        (emit c.lw c-reg42 uimm7-51-123-61-00-abs c-reg97))
(rvc-macro p-c-lw-2    "lw"     (all-isas c-ext) " ${c-reg117-ne0},${uimm8-32-121-63-00-abs}(${sp-reg})"    (emit c.lwsp c-reg117-ne0 uimm8-32-121-63-00-abs))
(rvc-macro p-c-lw-3    "lw"     (all-isas c-ext NO-DIS) " ${c-reg42},(${c-reg97})"                          (emit c.lw c-reg42 (uimm7-51-123-61-00-abs 0) c-reg97))
(rvc-macro p-c-lw-4    "lw"     (all-isas c-ext NO-DIS) " ${c-reg117-ne0},(${sp-reg})"                      (emit c.lwsp c-reg117-ne0 (uimm8-32-121-63-00-abs 0)))
(rvc-macro p-c-or      "or"     (all-isas c-ext) " ${c-tied-regs97-commutative},${c-reg42}"                 (emit c.or   (c-reg97 c-tied-regs97-commutative) c-reg42))
(rvc-macro p-c-sw-1    "sw"     (all-isas c-ext) " ${c-reg42},${uimm7-51-123-61-00-abs}(${c-reg97})"        (emit c.sw c-reg42 uimm7-51-123-61-00-abs c-reg97))
(rvc-macro p-c-sw-2    "sw"     (all-isas c-ext) " ${c-reg62},${uimm8-82-124-00-abs}(${sp-reg})"            (emit c.swsp c-reg62 uimm8-82-124-00-abs))
(rvc-macro p-c-sw-3    "sw"     (all-isas c-ext NO-DIS) " ${c-reg42},(${c-reg97})"                          (emit c.sw c-reg42 (uimm7-51-123-61-00-abs 0) c-reg97))
(rvc-macro p-c-sw-4    "sw"     (all-isas c-ext NO-DIS) " ${c-reg62},(${sp-reg})"                           (emit c.swsp c-reg62 (uimm8-82-124-00-abs 0)))
(rvc-macro p-c-xor     "xor"    (all-isas c-ext) " ${c-tied-regs97-commutative},${c-reg42}"                 (emit c.xor (c-reg97 c-tied-regs97-commutative) c-reg42))

; RV64C
(rvc-macro p-c-ld-1    "ld"     ((ISA rv64) (RVEXT RV64C)) " ${c-reg42},${uimm8-62-123-000-abs}(${c-reg97})"          (emit c.ld   c-reg42 uimm8-62-123-000-abs c-reg97))
(rvc-macro p-c-ld-2    "ld"     ((ISA rv64) (RVEXT RV64C)) " ${c-reg117-ne0},${uimm9-43-121-62-000-abs}(${sp-reg})"   (emit c.ldsp c-reg117-ne0 uimm9-43-121-62-000-abs))
(rvc-macro p-c-ld-3    "ld"     ((ISA rv64) (RVEXT RV64C) NO-DIS) " ${c-reg42},(${c-reg97})"                          (emit c.ld   c-reg42 (uimm8-62-123-000-abs 0) c-reg97))
(rvc-macro p-c-ld-4    "ld"     ((ISA rv64) (RVEXT RV64C) NO-DIS) " ${c-reg117-ne0},(${sp-reg})"                      (emit c.ldsp c-reg117-ne0 (uimm9-43-121-62-000-abs 0)))
(rvc-macro p-c-sd-1    "sd"     ((ISA rv64) (RVEXT RV64C)) " ${c-reg42},${uimm8-62-123-000-abs}(${c-reg97})"          (emit c.sd   c-reg42 uimm8-62-123-000-abs c-reg97))
(rvc-macro p-c-sd-2    "sd"     ((ISA rv64) (RVEXT RV64C)) " ${c-reg62},${uimm9-93-123-000-abs}(${sp-reg})"           (emit c.sdsp c-reg62 uimm9-93-123-000-abs))
(rvc-macro p-c-sd-3    "sd"     ((ISA rv64) (RVEXT RV64C) NO-DIS) " ${c-reg42},(${c-reg97})"                          (emit c.sd   c-reg42 (uimm8-62-123-000-abs 0) c-reg97))
(rvc-macro p-c-sd-4    "sd"     ((ISA rv64) (RVEXT RV64C) NO-DIS) " ${c-reg62},(${sp-reg})"                           (emit c.sdsp c-reg62 (uimm9-93-123-000-abs 0)))
(rvc-macro p-c-sext-w  "sext.w" ((ISA rv64) (RVEXT RV64C)) " ${c-tied-regs117-ne0}"                            (emit c.addiw (c-reg117-ne0 c-tied-regs117-ne0) (imm6-121-65-abs 0)))
(rvc-macro p-c-addiw   "addiw"  ((ISA rv64) (RVEXT RV64C)) " ${c-tied-regs117-ne0},${imm6-121-65-abs}"                (emit c.addiw (c-reg117-ne0 c-tied-regs117-ne0) imm6-121-65-abs))
(rvc-macro p-c-addw-1  "addw"   ((ISA rv64) (RVEXT RV64C)) " ${c-tied-regs97-commutative},${c-reg42}"                 (emit c.addw  (c-reg97 c-tied-regs97-commutative) c-reg42))
(rvc-macro p-c-addw-2  "addw"   ((ISA rv64) (RVEXT RV64C)) " ${c-tied-regs117-ne0},${imm6-121-65-abs}"                (emit c.addiw (c-reg117-ne0 c-tied-regs117-ne0) imm6-121-65-abs))
(rvc-macro p-c-subw    "subw"   ((ISA rv64) (RVEXT RV64C)) " ${c-tied-regs97},${c-reg42}"                             (emit c.subw  (c-reg97 c-tied-regs97) c-reg42))


;===------------------------- 'I' Macro instructions ------------------------===

(define-pmacro (rv-macro macro-name mnemonic attr-list asm expansion)
  (dnmi macro-name mnemonic attr-list (.str mnemonic asm) expansion)
)

; Instruction mnemonic aliases
;
; These instructions have the same mnemonic as register only instructions,
; however these instructions all have an immediate field in place of one of
; the register fields. There is a risk that the assembler will pick one of
; these aliases and then attempt to assemble a register name in an immediate
; field by treating the register as a symbol name. To avoid this case the
; immediate operands for these instructions will reject anything which is
; not an absolute value.

(rv-macro p-jalr-1       "jalr"       (all-isas i-ext)        " ${rd},${imm-lo12}(${rs1})"      (emit jalr rd rs1 imm-lo12))
(rv-macro p-add-1        "add"        (all-isas i-ext)        " ${rd},${rs1},${rs2}"            (emit add  rd rs1 rs2))
(rv-macro p-add-2        "add"        (all-isas i-ext NO-DIS) " ${rd},${rs1},${imm-lo12-abs}"   (emit addi rd rs1 (imm-lo12 imm-lo12-abs)))
(rv-macro p-and          "and"        (all-isas i-ext NO-DIS) " ${rd},${rs1},${imm-lo12-abs}"   (emit andi rd rs1 (imm-lo12 imm-lo12-abs)))
(rv-macro p-sll-1        "sll"        (all-isas i-ext NO-DIS) " ${rd},${rs1},${uimm5-245}"      (emit slli-shift5 rd rs1 uimm5-245))
(rv-macro p-srl-1        "srl"        (all-isas i-ext NO-DIS) " ${rd},${rs1},${uimm5-245}"      (emit srli-shift5 rd rs1 uimm5-245))
(rv-macro p-sra-1        "sra"        (all-isas i-ext NO-DIS) " ${rd},${rs1},${uimm5-245}"      (emit srai-shift5 rd rs1 uimm5-245))
(rv-macro p-sll-2        "sll"        (all-isas i-ext NO-DIS) " ${rd},${rs1},${uimm6-256}"      (emit slli-shift6 rd rs1 uimm6-256))
(rv-macro p-srl-2        "srl"        (all-isas i-ext NO-DIS) " ${rd},${rs1},${uimm6-256}"      (emit srli-shift6 rd rs1 uimm6-256))
(rv-macro p-sra-2        "sra"        (all-isas i-ext NO-DIS) " ${rd},${rs1},${uimm6-256}"      (emit srai-shift6 rd rs1 uimm6-256))
(rv-macro p-slt          "slt"        (all-isas i-ext NO-DIS) " ${rd},${rs1},${imm-lo12-abs}"   (emit slti  rd rs1 (imm-lo12 imm-lo12-abs)))
(rv-macro p-sltu         "sltu"       (all-isas i-ext NO-DIS) " ${rd},${rs1},${imm-lo12-abs}"   (emit sltiu rd rs1 (imm-lo12 imm-lo12-abs)))
(rv-macro p-sgt          "sgt"        (all-isas i-ext NO-DIS) " ${rd},${rs2},${rs1}"            (emit slt   rd rs1 rs2))
(rv-macro p-sgtu         "sgtu"       (all-isas i-ext NO-DIS) " ${rd},${rs2},${rs1}"            (emit sltu  rd rs1 rs2))
(rv-macro p-or           "or"         (all-isas i-ext NO-DIS) " ${rd},${rs1},${imm-lo12-abs}"   (emit ori   rd rs1 (imm-lo12 imm-lo12-abs)))
(rv-macro p-xor          "xor"        (all-isas i-ext NO-DIS) " ${rd},${rs1},${imm-lo12-abs}"   (emit xori  rd rs1 (imm-lo12 imm-lo12-abs)))
; Syntax for loads and stores where the offset is omitted
(rv-macro p-lb           "lb"         (all-isas i-ext NO-DIS) " ${rd},($rs1)"  (emit lb  rd rs1 (imm-lo12 0)))
(rv-macro p-lh           "lh"         (all-isas i-ext NO-DIS) " ${rd},($rs1)"  (emit lh  rd rs1 (imm-lo12 0)))
(rv-macro p-lw           "lw"         (all-isas i-ext NO-DIS) " ${rd},($rs1)"  (emit lw  rd rs1 (imm-lo12 0)))
(rv-macro p-lbu          "lbu"        (all-isas i-ext NO-DIS) " ${rd},($rs1)"  (emit lbu rd rs1 (imm-lo12 0)))
(rv-macro p-lhu          "lhu"        (all-isas i-ext NO-DIS) " ${rd},($rs1)"  (emit lhu rd rs1 (imm-lo12 0)))
(rv-macro p-sb           "sb"         (all-isas i-ext NO-DIS) " ${rs2},($rs1)" (emit sb rs2 rs1 (store12 0)))
(rv-macro p-sh           "sh"         (all-isas i-ext NO-DIS) " ${rs2},($rs1)" (emit sh rs2 rs1 (store12 0)))
(rv-macro p-sw           "sw"         (all-isas i-ext NO-DIS) " ${rs2},($rs1)" (emit sw rs2 rs1 (store12 0)))
; Macro instructions specified in the ISA doc
(rv-macro p-nop          "nop"        (all-isas i-ext)   ""                    (emit addi  (rd 0) (rs1 0) (imm-lo12 0)))
(rv-macro p-li           "li"         (all-isas i-ext)   " ${rd},${imm-lo12}"  (emit addi  rd (rs1 0) imm-lo12))
(rv-macro p-mv           "mv"         (all-isas i-ext)   " ${rd},${rs1}"       (emit addi  rd rs1 (imm-lo12 0)))
(rv-macro p-move         "move"       (all-isas i-ext NO-DIS)   " ${rd},${rs1}"       (emit addi  rd rs1 (imm-lo12 0)))
(rv-macro p-not          "not"        (all-isas i-ext)   " ${rd},${rs1}"       (emit xori  rd rs1 (imm-lo12 #xfff)))
(rv-macro p-neg          "neg"        (all-isas i-ext)   " ${rd},${rs2}"       (emit sub   rd (rs1 0) rs2))
(rv-macro p-negw         "negw"       (all-isas i-ext)   " ${rd},${rs2}"       (emit subw  rd (rs1 0) rs2))
(rv-macro p-seqz         "seqz"       (all-isas i-ext)   " ${rd},${rs1}"       (emit sltiu rd rs1 (imm-lo12 1)))
(rv-macro p-snez         "snez"       (all-isas i-ext)   " ${rd},${rs2}"       (emit sltu  rd (rs1 0) rs2))
(rv-macro p-sltz         "sltz"       (all-isas i-ext)   " ${rd},${rs1}"       (emit slt   rd rs1 (rs2 0)))
(rv-macro p-sgtz         "sgtz"       (all-isas i-ext)   " ${rd},${rs2}"       (emit slt   rd (rs1 0) rs2))
(rv-macro p-beqz         "beqz"       (all-isas i-ext RELAXABLE) " ${rs1},${branch13}" (emit beq rs1 (rs2 0) branch13))
(rv-macro p-bnez         "bnez"       (all-isas i-ext RELAXABLE) " ${rs1},${branch13}" (emit bne rs1 (rs2 0) branch13))
(rv-macro p-blez         "blez"       (all-isas i-ext RELAXABLE) " ${rs2},${branch13}" (emit bge (rs1 0) rs2 branch13))
(rv-macro p-bgez         "bgez"       (all-isas i-ext RELAXABLE) " ${rs1},${branch13}" (emit bge rs1 (rs2 0) branch13))
(rv-macro p-bltz         "bltz"       (all-isas i-ext RELAXABLE) " ${rs1},${branch13}" (emit blt rs1 (rs2 0) branch13))
(rv-macro p-bgtz         "bgtz"       (all-isas i-ext RELAXABLE) " ${rs2},${branch13}" (emit blt (rs1 0) rs2 branch13))
(rv-macro p-bgt          "bgt"        (all-isas i-ext RELAXABLE NO-DIS) " ${rs2},${rs1},${branch13}" (emit blt   rs1 rs2 branch13))
(rv-macro p-ble          "ble"        (all-isas i-ext RELAXABLE NO-DIS) " ${rs2},${rs1},${branch13}" (emit bge   rs1 rs2 branch13))
(rv-macro p-bgtu         "bgtu"       (all-isas i-ext RELAXABLE NO-DIS) " ${rs2},${rs1},${branch13}" (emit bltu  rs1 rs2 branch13))
(rv-macro p-bleu         "bleu"       (all-isas i-ext RELAXABLE NO-DIS) " ${rs2},${rs1},${branch13}" (emit bgeu  rs1 rs2 branch13))
(rv-macro p-j            "j"          (all-isas i-ext)        " ${jmp21}"            (emit jal  (rd 0) jmp21))
(rv-macro p-jal          "jal"        (all-isas i-ext NO-DIS) " ${jmp21}"            (emit jal  (rd 1) jmp21))
(rv-macro p-jr-1         "jr"         (all-isas i-ext)        " ${rs1}"              (emit jalr (rd 0) rs1 (imm-lo12 0)))
(rv-macro p-jr-2         "jr"         (all-isas i-ext)        " ${imm-lo12}(${rs1})" (emit jalr (rd 0) rs1 imm-lo12))
(rv-macro p-jr-3         "jr"         (all-isas i-ext NO-DIS) " ${rs1},${imm-lo12}"  (emit jalr (rd 0) rs1 imm-lo12))
(rv-macro p-jalr-2       "jalr"       (all-isas i-ext)        " ${rs1}"              (emit jalr (rd 1) rs1 (imm-lo12 0)))
(rv-macro p-jalr-3       "jalr"       (all-isas i-ext)        " ${imm-lo12}(${rs1})" (emit jalr (rd 1) rs1 imm-lo12))
(rv-macro p-jalr-4       "jalr"       (all-isas i-ext NO-DIS) " ${rs1},${imm-lo12}"  (emit jalr (rd 1) rs1 imm-lo12))
(rv-macro p-jalr-5       "jalr"       (all-isas i-ext)        " ${rd},${rs1}"        (emit jalr rd rs1 (imm-lo12 0)))
(rv-macro p-ret          "ret"        (all-isas i-ext)        ""                     (emit jalr (rd 0) (rs1 1) (imm-lo12 0)))

; Misc
(rv-macro p-unimp        "unimp"      (all-isas i-ext) "" (emit csrrw (rd 0) (csr #xc00) (rs1 0)))
(rv-macro p-fence        "fence"      (all-isas i-ext) "" (emit fence (succ 15) (pred 15)))
(rv-macro p-rdinstret    "rdinstret"  (all-isas i-ext) " ${rd}" (emit csrrs rd (csr #xc02) (rs1 0)))
(rv-macro p-rdcycle      "rdcycle"    (all-isas i-ext) " ${rd}" (emit csrrs rd (csr #xc00) (rs1 0)))
(rv-macro p-rdtime       "rdtime"     (all-isas i-ext) " ${rd}" (emit csrrs rd (csr #xc01) (rs1 0)))
(rv-macro p-csrr         "csrr"       (all-isas i-ext)        " ${rd},${csr}"       (emit csrrs  rd csr (rs1 0)))
(rv-macro p-csrw-1       "csrw"       (all-isas i-ext)        " ${csr},${rs1}"      (emit csrrw  (rd 0) csr rs1))
(rv-macro p-csrs-1       "csrs"       (all-isas i-ext)        " ${csr},${rs1}"      (emit csrrs  (rd 0) csr rs1))
(rv-macro p-csrc-1       "csrc"       (all-isas i-ext)        " ${csr},${rs1}"      (emit csrrc  (rd 0) csr rs1))
(rv-macro p-csrw-2       "csrw"       (all-isas i-ext NO-DIS) " ${csr},${uimm5-abs}" (emit csrrwi (rd 0) csr uimm5))
(rv-macro p-csrs-2       "csrs"       (all-isas i-ext NO-DIS) " ${csr},${uimm5-abs}" (emit csrrsi (rd 0) csr uimm5))
(rv-macro p-csrc-2       "csrc"       (all-isas i-ext NO-DIS) " ${csr},${uimm5-abs}" (emit csrrci (rd 0) csr uimm5))
(rv-macro p-csrwi        "csrwi"      (all-isas i-ext)        " ${csr},${uimm5}"     (emit csrrwi (rd 0) csr uimm5))
(rv-macro p-csrsi        "csrsi"      (all-isas i-ext)        " ${csr},${uimm5}"     (emit csrrsi (rd 0) csr uimm5))
(rv-macro p-csrci        "csrci"      (all-isas i-ext)        " ${csr},${uimm5}"     (emit csrrci (rd 0) csr uimm5))
(rv-macro p-sfence-vm    "sfence.vm"  (all-isas i-ext) ""        (emit sfence.vm  (rs1 0)))
(rv-macro p-sfence-vma-1 "sfence.vma" (all-isas i-ext) ""        (emit sfence.vma (rs1 0) (rs2 0)))
(rv-macro p-sfence-vma-2 "sfence.vma" (all-isas i-ext) " ${rs1}" (emit sfence.vma rs1     (rs2 0)))
; Deprecated aliases for ebreak/sbreak
(rv-macro p-scall        "scall"      (all-isas i-ext NO-DIS) "" (emit ecall))
(rv-macro p-sbreak       "sbreak"     (all-isas i-ext NO-DIS) "" (emit ebreak))

; RV32I
(rv-macro p-rdinstreth   "rdinstreth" ((ISA rv32) (RVEXT RV32I)) " ${rd}" (emit csrrs rd (csr #xc82) (rs1 0)))
(rv-macro p-rdcycleh     "rdcycleh"   ((ISA rv32) (RVEXT RV32I)) " ${rd}" (emit csrrs rd (csr #xc80) (rs1 0)))
(rv-macro p-rdtimeh      "rdtimeh"    ((ISA rv32) (RVEXT RV32I)) " ${rd}" (emit csrrs rd (csr #xc81) (rs1 0)))

;; RV64I
; Already defined above...
;; (rv-macro p-sll-2 "sll"    ((ISA rv64) (RVEXT RV64I) NO-DIS) " ${rd},${rs1},${uimm6-256}"    (emit slli-shift6 rd rs1 uimm6-256))
;; (rv-macro p-srl-2 "srl"    ((ISA rv64) (RVEXT RV64I) NO-DIS) " ${rd},${rs1},${uimm6-256}"    (emit srli-shift6 rd rs1 uimm6-256))
;; (rv-macro p-sra-2 "sra"    ((ISA rv64) (RVEXT RV64I) NO-DIS) " ${rd},${rs1},${uimm6-256}"    (emit srai-shift6 rd rs1 uimm6-256))
(rv-macro p-addw  "addw"   ((ISA rv64) (RVEXT RV64I) NO-DIS) " ${rd},${rs1},${imm-lo12-abs}" (emit addiw rd rs1 (imm-lo12 imm-lo12-abs)))
(rv-macro p-sllw  "sllw"   ((ISA rv64) (RVEXT RV64I) NO-DIS) " ${rd},${rs1},${uimm5-245}"    (emit slliw-shift5 rd rs1 uimm5-245))
(rv-macro p-srlw  "srlw"   ((ISA rv64) (RVEXT RV64I) NO-DIS) " ${rd},${rs1},${uimm5-245}"    (emit srliw-shift5 rd rs1 uimm5-245))
(rv-macro p-sraw  "sraw"   ((ISA rv64) (RVEXT RV64I) NO-DIS) " ${rd},${rs1},${uimm5-245}"    (emit sraiw-shift5 rd rs1 uimm5-245))
(rv-macro p-lwu   "lwu"    ((ISA rv64) (RVEXT RV64I) NO-DIS) " ${rd},($rs1)"  (emit lwu rd rs1 (imm-lo12 0)))
(rv-macro p-ld    "ld"     ((ISA rv64) (RVEXT RV64I) NO-DIS) " ${rd},($rs1)"  (emit ld  rd rs1 (imm-lo12 0)))
(rv-macro p-sd    "sd"     ((ISA rv64) (RVEXT RV64I) NO-DIS) " ${rs2},($rs1)" (emit sd rs2 rs1 (store12 0)))
(rv-macro p-sextw "sext.w" ((ISA rv64) (RVEXT RV64I))        " ${rd},${rs1}"  (emit addiw rd rs1 (imm-lo12 0)))


;===----------------- 'M' extension macro instructions ----------------------===


;===----------------- 'A' extension macro instructions ----------------------===


;===----------------- 'F' extension macro instructions ----------------------===

(rv-macro p-flw        "flw"       (all-isas f-ext NO-DIS) " ${fl-rd},${imm-lo12},${rs1}" (emit flw fl-rd imm-lo12 rs1))
(rv-macro p-fsw        "fsw"       (all-isas f-ext NO-DIS) " ${fl-rs2},${store12},${rs1}" (emit fsw fl-rs2 store12 rs1))
(rv-macro p-frsr       "frsr"      (all-isas f-ext) " ${rd}"          (emit csrrs rd     (csr #x03) (rs1 0)))
(rv-macro p-fssr-1     "fssr"      (all-isas f-ext) " ${rd},${rs1}"   (emit csrrw rd     (csr #x03) rs1))
(rv-macro p-fssr-2     "fssr"      (all-isas f-ext) " ${rs1}"         (emit csrrw (rd 0) (csr #x03) rs1))
(rv-macro p-frcsr      "frcsr"     (all-isas f-ext) " ${rd}"          (emit csrrs rd     (csr #x03) (rs1 0)))
(rv-macro p-fscsr-1    "fscsr"     (all-isas f-ext) " ${rd},${rs1}"   (emit csrrw rd     (csr #x03) rs1))
(rv-macro p-fscsr-2    "fscsr"     (all-isas f-ext) " ${rs1}"         (emit csrrw (rd 0) (csr #x03) rs1))
(rv-macro p-frrm       "frrm"      (all-isas f-ext) " ${rd}"          (emit csrrs rd     (csr #x02) (rs1 0)))
(rv-macro p-fsrm-1     "fsrm"      (all-isas f-ext) " ${rd},${rs1}"   (emit csrrw rd     (csr #x02) rs1))
(rv-macro p-fsrm-2     "fsrm"      (all-isas f-ext) " ${rs1}"         (emit csrrw (rd 0) (csr #x02) rs1))
(rv-macro p-fsrmi-1    "fsrmi"     (all-isas f-ext) " ${rd},${uimm5}" (emit csrrwi rd    (csr #x02) uimm5))
(rv-macro p-fsrmi-2    "fsrmi"     (all-isas f-ext) " ${uimm5}"       (emit csrrwi (rd 0)(csr #x02) uimm5))
(rv-macro p-frflags    "frflags"   (all-isas f-ext) " ${rd}"          (emit csrrs rd     (csr #x01) (rs1 0)))
(rv-macro p-fsflags-1  "fsflags"   (all-isas f-ext) " ${rd},${rs1}"   (emit csrrw rd     (csr #x01) rs1))
(rv-macro p-fsflags-2  "fsflags"   (all-isas f-ext) " ${rs1}"         (emit csrrw (rd 0) (csr #x01) rs1))
(rv-macro p-fsflagsi-1 "fsflagsi"  (all-isas f-ext NO-DIS) " ${rd},${uimm5}" (emit csrrwi rd    (csr #x01) uimm5))
(rv-macro p-fsflagsi-2 "fsflagsi"  (all-isas f-ext NO-DIS) " ${uimm5}"       (emit csrrwi (rd 0)(csr #x01) uimm5))
(rv-macro p-fmv.x.s    "fmv.x.s"   (all-isas f-ext NO-DIS) " ${rd},${fl-rs1}" (emit fmv.x.w rd fl-rs1))
(rv-macro p-fmv.s.x    "fmv.s.x"   (all-isas f-ext NO-DIS) " ${fl-rd},${rs1}" (emit fmv.w.x fl-rd rs1))
(rv-macro p-fmadd.s    "fmadd.s"   (all-isas f-ext) " ${fl-rd},${fl-rs1},${fl-rs2},${fl-rs3}" (emit fmadd.s  fl-rd fl-rs1 fl-rs2 fl-rs3 (fl-rm #b111)))
(rv-macro p-fmsub.s    "fmsub.s"   (all-isas f-ext) " ${fl-rd},${fl-rs1},${fl-rs2},${fl-rs3}" (emit fmsub.s  fl-rd fl-rs1 fl-rs2 fl-rs3 (fl-rm #b111)))
(rv-macro p-fnmsub.s   "fnmsub.s"  (all-isas f-ext) " ${fl-rd},${fl-rs1},${fl-rs2},${fl-rs3}" (emit fnmsub.s fl-rd fl-rs1 fl-rs2 fl-rs3 (fl-rm #b111)))
(rv-macro p-fnmadd.s   "fnmadd.s"  (all-isas f-ext) " ${fl-rd},${fl-rs1},${fl-rs2},${fl-rs3}" (emit fnmadd.s fl-rd fl-rs1 fl-rs2 fl-rs3 (fl-rm #b111)))
(rv-macro p-fadd.s     "fadd.s"    (all-isas f-ext) " ${fl-rd},${fl-rs1},${fl-rs2}" (emit fadd.s fl-rd fl-rs1 fl-rs2 (fl-rm #b111)))
(rv-macro p-fsub.s     "fsub.s"    (all-isas f-ext) " ${fl-rd},${fl-rs1},${fl-rs2}" (emit fsub.s fl-rd fl-rs1 fl-rs2 (fl-rm #b111)))
(rv-macro p-fmul.s     "fmul.s"    (all-isas f-ext) " ${fl-rd},${fl-rs1},${fl-rs2}" (emit fmul.s fl-rd fl-rs1 fl-rs2 (fl-rm #b111)))
(rv-macro p-fdiv.s     "fdiv.s"    (all-isas f-ext) " ${fl-rd},${fl-rs1},${fl-rs2}" (emit fdiv.s fl-rd fl-rs1 fl-rs2 (fl-rm #b111)))
(rv-macro p-fsqrt.s    "fsqrt.s"   (all-isas f-ext) " ${fl-rd},${fl-rs1}" (emit fsqrt.s fl-rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fcvt.w.s   "fcvt.w.s"  (all-isas f-ext) " ${rd},${fl-rs1}" (emit fcvt.w.s  rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fcvt.wu.s  "fcvt.wu.s" (all-isas f-ext) " ${rd},${fl-rs1}" (emit fcvt.wu.s rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fcvt.s.w   "fcvt.s.w"  (all-isas f-ext) " ${fl-rd},${rs1}" (emit fcvt.s.w  fl-rd rs1 (fl-rm #b111)))
(rv-macro p-fcvt.s.wu  "fcvt.s.wu" (all-isas f-ext) " ${fl-rd},${rs1}" (emit fcvt.s.wu fl-rd rs1 (fl-rm #b111)))
(rv-macro p-fgt.s      "fgt.s"     (all-isas f-ext NO-DIS) " ${rd},${fl-rs2},${fl-rs1}" (emit flt.s rd fl-rs2 fl-rs1))
(rv-macro p-fge.s      "fge.s"     (all-isas f-ext NO-DIS) " ${rd},${fl-rs2},${fl-rs1}" (emit fle.s rd fl-rs2 fl-rs1))

;RV64F
(rv-macro p-fcvt.l.s   "fcvt.l.s"  ((ISA rv64) (RVEXT RV64F)) " ${rd},${fl-rs1}" (emit fcvt.l.s  rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fcvt.lu.s  "fcvt.lu.s" ((ISA rv64) (RVEXT RV64F)) " ${rd},${fl-rs1}" (emit fcvt.lu.s rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fcvt.s.l   "fcvt.s.l"  ((ISA rv64) (RVEXT RV64F)) " ${fl-rd},${rs1}" (emit fcvt.s.l  fl-rd rs1 (fl-rm #b111)))
(rv-macro p-fcvt.s.lu  "fcvt.s.lu" ((ISA rv64) (RVEXT RV64F)) " ${fl-rd},${rs1}" (emit fcvt.s.lu fl-rd rs1 (fl-rm #b111)))

;RV32FC
;(rvc-macro p-c-flwsp   "flw"       ((ISA rv32) (RVEXT RV32C)) " ${fl-rd},${uimm8-32-121-63-00-abs}(${sp-reg})"   (emit c.flwsp fl-rd uimm8-32-121-63-00-abs))
;(rvc-macro p-c-fswsp   "fsw"       ((ISA rv32) (RVEXT RV32C)) " ${fc-rs3},${uimm8-82-124-00-abs}(${sp-reg})"     (emit c.fswsp fc-rs3 uimm8-82-124-00-abs))
;(rvc-macro p-c-fsw     "fsw"       ((ISA rv32) (RVEXT RV32C)) " ${fc-rs2},${uimm7-51-123-61-00-abs}(${c-reg97})" (emit c.fsw fc-rs2 uimm7-51-123-61-00-abs c-reg97))
;(rvc-macro p-c-flw     "flw"       ((ISA rv32) (RVEXT RV32C)) " ${fc-rs2},${uimm7-51-123-61-00-abs}(${c-reg97})" (emit c.flw fc-rs2 uimm7-51-123-61-00-abs c-reg97))

;RV64FD
;(rvc-macro p-c-fldsp   "fld"       (all-isas c-ext) " ${fl-rd},${uimm9-43-121-62-000-abs}(${sp-reg})"  (emit c.fldsp fl-rd uimm9-43-121-62-000-abs))
;(rvc-macro p-c-fsdsp   "fsd"       (all-isas c-ext) " ${fc-rs3},${uimm9-93-123-000-abs}(${sp-reg})"    (emit c.fsdsp fc-rs3 uimm9-93-123-000-abs))
;(rvc-macro p-c-fsd     "fsd"       (all-isas c-ext) " ${fc-rs2},${uimm8-62-123-000-abs}(${c-reg97})"   (emit c.fsd fc-rs2 uimm8-62-123-000-abs c-reg97))
;(rvc-macro p-c-fld     "fld"       (all-isas c-ext) " ${fc-rs2},${uimm8-62-123-000-abs}(${c-reg97})"   (emit c.fld fc-rs2 uimm8-62-123-000-abs c-reg97))

;===----------------- 'D' extension macro instructions ----------------------===

(rv-macro p-fld        "fld"       (all-isas d-ext NO-DIS) " ${fl-rd},${imm-lo12},${rs1}" (emit fld fl-rd imm-lo12 rs1))
(rv-macro p-fsd        "fsd"       (all-isas d-ext NO-DIS) " ${fl-rs2},${store12},${rs1}" (emit fsd fl-rs2 store12 rs1))
(rv-macro p-fmadd.d    "fmadd.d"   (all-isas d-ext) " ${fl-rd},${fl-rs1},${fl-rs2},${fl-rs3}" (emit fmadd.d  fl-rd fl-rs1 fl-rs2 fl-rs3 (fl-rm #b111)))
(rv-macro p-fmsub.d    "fmsub.d"   (all-isas d-ext) " ${fl-rd},${fl-rs1},${fl-rs2},${fl-rs3}" (emit fmsub.d  fl-rd fl-rs1 fl-rs2 fl-rs3 (fl-rm #b111)))
(rv-macro p-fnmsub.d   "fnmsub.d"  (all-isas d-ext) " ${fl-rd},${fl-rs1},${fl-rs2},${fl-rs3}" (emit fnmsub.d fl-rd fl-rs1 fl-rs2 fl-rs3 (fl-rm #b111)))
(rv-macro p-fnmadd.d   "fnmadd.d"  (all-isas d-ext) " ${fl-rd},${fl-rs1},${fl-rs2},${fl-rs3}" (emit fnmadd.d fl-rd fl-rs1 fl-rs2 fl-rs3 (fl-rm #b111)))
(rv-macro p-fadd.d     "fadd.d"    (all-isas d-ext) " ${fl-rd},${fl-rs1},${fl-rs2}" (emit fadd.d fl-rd fl-rs1 fl-rs2 (fl-rm #b111)))
(rv-macro p-fsub.d     "fsub.d"    (all-isas d-ext) " ${fl-rd},${fl-rs1},${fl-rs2}" (emit fsub.d fl-rd fl-rs1 fl-rs2 (fl-rm #b111)))
(rv-macro p-fmul.d     "fmul.d"    (all-isas d-ext) " ${fl-rd},${fl-rs1},${fl-rs2}" (emit fmul.d fl-rd fl-rs1 fl-rs2 (fl-rm #b111)))
(rv-macro p-fdiv.d     "fdiv.d"    (all-isas d-ext) " ${fl-rd},${fl-rs1},${fl-rs2}" (emit fdiv.d fl-rd fl-rs1 fl-rs2 (fl-rm #b111)))
(rv-macro p-fsqrt.d    "fsqrt.d"   (all-isas d-ext) " ${fl-rd},${fl-rs1}" (emit fsqrt.d fl-rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fcvt.w.d   "fcvt.w.d"  (all-isas d-ext) " ${rd},${fl-rs1}" (emit fcvt.w.d  rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fcvt.wu.d  "fcvt.wu.d" (all-isas d-ext) " ${rd},${fl-rs1}" (emit fcvt.wu.d rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fcvt.s.d   "fcvt.s.d"  (all-isas d-ext) " ${fl-rd},${fl-rs1}" (emit fcvt.s.d fl-rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fgt.d      "fgt.d"     (all-isas d-ext NO-DIS) " ${rd},${fl-rs2},${fl-rs1}" (emit flt.d rd fl-rs2 fl-rs1))
(rv-macro p-fge.d      "fge.d"     (all-isas d-ext NO-DIS) " ${rd},${fl-rs2},${fl-rs1}" (emit fle.d rd fl-rs2 fl-rs1))

;RV64D
(rv-macro p-fcvt.l.d   "fcvt.l.d"  ((ISA rv64) (RVEXT RV64D)) " ${rd},${fl-rs1}" (emit fcvt.l.d  rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fcvt.lu.d  "fcvt.lu.d" ((ISA rv64) (RVEXT RV64D)) " ${rd},${fl-rs1}" (emit fcvt.lu.d rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fcvt.d.l   "fcvt.d.l"  ((ISA rv64) (RVEXT RV64D)) " ${fl-rd},${rs1}" (emit fcvt.d.l  fl-rd rs1 (fl-rm #b111)))
(rv-macro p-fcvt.d.lu  "fcvt.d.lu" ((ISA rv64) (RVEXT RV64D)) " ${fl-rd},${rs1}" (emit fcvt.d.lu fl-rd rs1 (fl-rm #b111)))

;===----------------- 'Q' extension macro instructions ----------------------===

(rv-macro p-flq        "flq"       (all-isas q-ext NO-DIS) " ${fl-rd},${imm-lo12},${rs1}" (emit flq fl-rd imm-lo12 rs1))
(rv-macro p-fsq        "fsq"       (all-isas q-ext NO-DIS) " ${fl-rs2},${store12},${rs1}" (emit fsq fl-rs2 store12 rs1))
(rv-macro p-fmadd.q    "fmadd.q"   (all-isas q-ext) " ${fl-rd},${fl-rs1},${fl-rs2},${fl-rs3}" (emit fmadd.q  fl-rd fl-rs1 fl-rs2 fl-rs3 (fl-rm #b111)))
(rv-macro p-fmsub.q    "fmsub.q"   (all-isas q-ext) " ${fl-rd},${fl-rs1},${fl-rs2},${fl-rs3}" (emit fmsub.q  fl-rd fl-rs1 fl-rs2 fl-rs3 (fl-rm #b111)))
(rv-macro p-fnmsub.q   "fnmsub.q"  (all-isas q-ext) " ${fl-rd},${fl-rs1},${fl-rs2},${fl-rs3}" (emit fnmsub.q fl-rd fl-rs1 fl-rs2 fl-rs3 (fl-rm #b111)))
(rv-macro p-fnmadd.q   "fnmadd.q"  (all-isas q-ext) " ${fl-rd},${fl-rs1},${fl-rs2},${fl-rs3}" (emit fnmadd.q fl-rd fl-rs1 fl-rs2 fl-rs3 (fl-rm #b111)))
(rv-macro p-fadd.q     "fadd.q"    (all-isas q-ext) " ${fl-rd},${fl-rs1},${fl-rs2}" (emit fadd.q fl-rd fl-rs1 fl-rs2 (fl-rm #b111)))
(rv-macro p-fsub.q     "fsub.q"    (all-isas q-ext) " ${fl-rd},${fl-rs1},${fl-rs2}" (emit fsub.q fl-rd fl-rs1 fl-rs2 (fl-rm #b111)))
(rv-macro p-fmul.q     "fmul.q"    (all-isas q-ext) " ${fl-rd},${fl-rs1},${fl-rs2}" (emit fmul.q fl-rd fl-rs1 fl-rs2 (fl-rm #b111)))
(rv-macro p-fdiv.q     "fdiv.q"    (all-isas q-ext) " ${fl-rd},${fl-rs1},${fl-rs2}" (emit fdiv.q fl-rd fl-rs1 fl-rs2 (fl-rm #b111)))
(rv-macro p-fsqrt.q    "fsqrt.q"   (all-isas q-ext) " ${fl-rd},${fl-rs1}" (emit fsqrt.q fl-rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fcvt.w.q   "fcvt.w.q"  (all-isas q-ext) " ${rd},${fl-rs1}" (emit fcvt.w.q  rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fcvt.wu.q  "fcvt.wu.q" (all-isas q-ext) " ${rd},${fl-rs1}" (emit fcvt.wu.q rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fcvt.s.q   "fcvt.s.q"  (all-isas q-ext) " ${fl-rd},${fl-rs1}" (emit fcvt.s.q fl-rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fcvt.d.q   "fcvt.d.q"  (all-isas q-ext) " ${fl-rd},${fl-rs1}" (emit fcvt.d.q fl-rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fgt.q      "fgt.q"     (all-isas q-ext NO-DIS) " ${rd},${fl-rs2},${fl-rs1}" (emit flt.q rd fl-rs2 fl-rs1))
(rv-macro p-fge.q      "fge.q"     (all-isas q-ext NO-DIS) " ${rd},${fl-rs2},${fl-rs1}" (emit fle.q rd fl-rs2 fl-rs1))

;RV64Q
(rv-macro p-fcvt.l.q   "fcvt.l.q"  ((ISA rv64) (RVEXT RV64q)) " ${rd},${fl-rs1}" (emit fcvt.l.q  rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fcvt.lu.q  "fcvt.lu.q" ((ISA rv64) (RVEXT RV64q)) " ${rd},${fl-rs1}" (emit fcvt.lu.q rd fl-rs1 (fl-rm #b111)))
(rv-macro p-fcvt.q.l   "fcvt.q.l"  ((ISA rv64) (RVEXT RV64q)) " ${fl-rd},${rs1}" (emit fcvt.q.l  fl-rd rs1 (fl-rm #b111)))
(rv-macro p-fcvt.q.lu  "fcvt.q.lu" ((ISA rv64) (RVEXT RV64q)) " ${fl-rd},${rs1}" (emit fcvt.q.lu fl-rd rs1 (fl-rm #b111)))

;===------------- Special instructions for the .insn directive --------------===

(define-hardware
  (name h-opcode7)
  (comment "opcodes")
  (attrs all-isas all-machs VIRTUAL)
  (type register WI)
  (indices keyword "" (
    (LOAD #x03)  (LOAD_FP #x07) (CUSTOM_0 #x0b) (MISC_MEM #x0f) (OP_IMM #x13)
    (AUIPC #x17) (OP_IMM_32 #x1b)
    ; 48b #x1f

    (STORE #x23) (STORE_FP #x27) (CUSTOM_1 #x2b) (AMO #x2f) (OP #x33) (LUI #x37)
    (OP_32 #x3b)
    ; 64b #x3f

    (MADD #x43) (MSUB #x47) (NMADD #x4b) (NMSUB #x4f) (OP_FP #x53)
    ; reserved #x57
    (CUSTOM_2 #x5b)
    ; 48b #x5f

    (BRANCH #x63) (JALR #x67)
    ; reserved #x5b
    (JAL #x6f) (SYSTEM #x73)
    ; reserved #x77
    (CUSTOM_3 #x7b))
  )
  ; dummy getters and setters
  (get () (const 0))
  (set (newval) (nop))
)
(define-hardware
  (name h-copcode2)
  (comment "compressed opcodes")
  (attrs all-isas all-machs VIRTUAL)
  (type register WI)
  (indices keyword "" ((C0 #x0) (C1 #x1) (C2 #x2)))
  ; dummy getters and setters
  (get () (const 0))
  (set (newval) (nop))
)

(define-operand
  (name opcode7)
  (comment "opcode7")
  (attrs all-isas)
  (type h-opcode7)
  (mode UDI)
  (index f-opcode)
  (handlers (parse "opcode7"))
)
(define-operand
  (name copcode2)
  (comment "copcode2")
  (attrs all-isas)
  (type h-copcode2)
  (mode UDI)
  (index f-c-opcode)
  (handlers (parse "copcode2"))
)
(define-operand
  (name funct7)
  (comment "funct7")
  (attrs all-isas)
  (type h-uint)
  (mode UDI)
  (index f-funct7)
)
(define-operand
  (name funct3)
  (comment "funct3")
  (attrs all-isas)
  (type h-uint)
  (mode UDI)
  (index f-funct3)
)
(define-operand
  (name funct2)
  (comment "funct2")
  (attrs all-isas)
  (type h-uint)
  (mode UDI)
  (index f-funct2)
)
(define-operand
  (name cfunct3)
  (comment "cfunct3")
  (attrs all-isas)
  (type h-uint)
  (mode UDI)
  (index f-c-funct3)
)
(define-operand
  (name cfunct4)
  (comment "cfunct4")
  (attrs all-isas)
  (type h-uint)
  (mode UDI)
  (index f-c-funct4)
)

;; For floating point values
(dni insn-r-fff ".insn r"   (all-isas f-ext NO-DIS)
  "_insn_r ${opcode7},${funct3},${funct7},${fl-rd},${fl-rs1},${fl-rs2}"
  (+ funct7 fl-rs2 fl-rs1 funct3 fl-rd opcode7)
  #f ())
(dni insn-r-fgg ".insn r"   (all-isas f-ext NO-DIS)
  "_insn_r ${opcode7},${funct3},${funct7},${fl-rd},${rs1},${rs2}"
  (+ funct7 rs2 rs1 funct3 fl-rd opcode7)
  #f ())
(dni insn-r-gfg ".insn r"   (all-isas f-ext NO-DIS)
  "_insn_r ${opcode7},${funct3},${funct7},${rd},${fl-rs1},${rs2}"
  (+ funct7 rs2 fl-rs1 funct3 rd opcode7)
  #f ())
(dni insn-r-ggf ".insn r"   (all-isas f-ext NO-DIS)
  "_insn_r ${opcode7},${funct3},${funct7},${rd},${rs1},${fl-rs2}"
  (+ funct7 fl-rs2 rs1 funct3 rd opcode7)
  #f ())
(dni insn-r-ffg ".insn r"   (all-isas f-ext NO-DIS)
  "_insn_r ${opcode7},${funct3},${funct7},${fl-rd},${fl-rs1},${rs2}"
  (+ funct7 rs2 fl-rs1 funct3 fl-rd opcode7)
  #f ())
(dni insn-r-fgf ".insn r"   (all-isas f-ext NO-DIS)
  "_insn_r ${opcode7},${funct3},${funct7},${fl-rd},${rs1},${fl-rs2}"
  (+ funct7 fl-rs2 rs1 funct3 fl-rd opcode7)
  #f ())
(dni insn-r-gff ".insn r"   (all-isas f-ext NO-DIS)
  "_insn_r ${opcode7},${funct3},${funct7},${rd},${fl-rs1},${fl-rs2}"
  (+ funct7 fl-rs2 fl-rs1 funct3 rd opcode7)
  #f ())

(dni insn-r4  ".insn r"   (all-isas f-ext NO-DIS)
  "_insn_r ${opcode7},${funct3},${funct2},${rd},${rs1},${rs2},${rs3}"
  (+ rs3 funct2 rs2 rs1 funct3 rd opcode7)
  #f ())

(dni insn-r    ".insn r"   (all-isas i-ext NO-DIS)
  "_insn_r ${opcode7},${funct3},${funct7},${rd},${rs1},${rs2}"
  (+ funct7 rs2 rs1 funct3 rd opcode7)
  #f ())

(dni insn-i-1  ".insn i"   (all-isas i-ext NO-DIS)
  "_insn_i ${opcode7},${funct3},${rd},${rs1},${imm-lo12}"
  (+ imm-lo12 rs1 funct3 rd opcode7)
  #f ())
(dni insn-i-2  ".insn i"   (all-isas i-ext NO-DIS)
  "_insn_i ${opcode7},${funct3},${rd},${imm-lo12}(${rs1})"
  (+ imm-lo12 rs1 funct3 rd opcode7)
  #f ())
(dni insn-s    ".insn s"   (all-isas i-ext NO-DIS)
  "_insn_s ${opcode7},${funct3},${rd},${imm-lo12}(${rs1})"
  (+ imm-lo12 rs1 funct3 rd opcode7)
  #f ())
(dni insn-sb-1 ".insn sb"  (all-isas i-ext NO-DIS)
  "_insn_sb ${opcode7},${funct3},${rs2},${store12}(${rs1})"
  (+ store12 rs2 rs1 funct3 opcode7)
  #f ())
(dni insn-sb-2 ".insn sb"  (all-isas i-ext NO-DIS)
  "_insn_sb ${opcode7},${funct3},${rs1},${rs2},${branch13}"
  (+ branch13 rs2 rs1 funct3 opcode7)
  #f ())
(dni insn-u    ".insn u"   (all-isas i-ext NO-DIS)
  "_insn_u ${opcode7},${rd},${uimm32-3120-000000000000}"
  (+ uimm32-3120-000000000000 rd opcode7)
  #f ())
(dni insn-uj   ".insn uj"  (all-isas i-ext NO-DIS)
  "_insn_uj ${opcode7},${rd},${jmp21}"
  (+ jmp21 rd opcode7)
  #f ())

(dni insn-ci   ".insn ci"  (all-isas i-ext NO-DIS)
  "_insn_ci ${copcode2},${cfunct3},${c-reg117},${imm6-121-65-abs}"
  (+ cfunct3 imm6-121-65-abs c-reg117 copcode2)
  #f ())
(dni insn-cr   ".insn cr"  (all-isas i-ext NO-DIS)
  "_insn_cr ${copcode2},${cfunct4},${c-reg117},${c-reg62}"
  (+ cfunct4 c-reg117 c-reg62 copcode2)
  #f ())
(dni insn-ciw  ".insn ciw" (all-isas i-ext NO-DIS)
  "_insn_ciw ${copcode2},${cfunct3},${c-reg117},${imm6-121-65-abs}"
  (+ cfunct3 imm6-121-65-abs c-reg117 copcode2)
  #f ())
(dni insn-cb   ".insn cb"  (all-isas i-ext NO-DIS)
  "_insn_cb ${copcode2},${cfunct3},${c-reg97},${cbranch9}"
  (+ cfunct3 cbranch9 c-reg97 copcode2)
  #f ())
(dni insn-cj   ".insn cj"  (all-isas i-ext NO-DIS)
  "_insn_cj ${copcode2},${cfunct3},${cjmp12}"
  (+ cfunct3 cjmp12 copcode2)
  #f ())
